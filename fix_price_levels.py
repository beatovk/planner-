#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω –≤ –ë–î
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ (0-4)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from sqlalchemy import func

def normalize_price_level(price_level):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç"""
    if price_level is None:
        return None
    
    # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(price_level, int):
        return price_level
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    mapping = {
        'PRICE_LEVEL_FREE': 0,
        'PRICE_LEVEL_INEXPENSIVE': 1,
        'PRICE_LEVEL_MODERATE': 2,
        'PRICE_LEVEL_EXPENSIVE': 3,
        'PRICE_LEVEL_VERY_EXPENSIVE': 4,
    }
    
    return mapping.get(price_level, None)

def fix_price_levels():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ —Ü–µ–Ω –≤ –ë–î"""
    db = SessionLocal()
    try:
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        price_stats_before = db.query(Place.price_level, func.count(Place.id)).group_by(Place.price_level).all()
        print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for price, count in price_stats_before:
            print(f"  {price}: {count} –º–µ—Å—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ü–µ–Ω
        places_to_fix = db.query(Place).filter(
            Place.price_level.isnot(None),
            Place.price_level.notlike('PRICE_LEVEL_%')
        ).all()
        
        print(f"\\nüîç –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(places_to_fix)}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ
        fixed_count = 0
        for place in places_to_fix:
            old_price = place.price_level
            new_price = normalize_price_level(old_price)
            
            if new_price is not None and new_price != old_price:
                place.price_level = new_price
                print(f"  ID {place.id}: {old_price} ‚Üí {new_price}")
                fixed_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        print(f"\\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –º–µ—Å—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        price_stats_after = db.query(Place.price_level, func.count(Place.id)).group_by(Place.price_level).all()
        print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for price, count in price_stats_after:
            print(f"  {price}: {count} –º–µ—Å—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Ü–µ–Ω —Ç–µ–ø–µ—Ä—å —á–∏—Å–ª–æ–≤—ã–µ
        non_numeric = db.query(Place).filter(
            Place.price_level.isnot(None),
            Place.price_level.notlike('PRICE_LEVEL_%')
        ).count()
        
        if non_numeric == 0:
            print("\\nüéâ –í—Å–µ —É—Ä–æ–≤–Ω–∏ —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
        else:
            print(f"\\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {non_numeric} –º–µ—Å—Ç —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ü–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    fix_price_levels()
