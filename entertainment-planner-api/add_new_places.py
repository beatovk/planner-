#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Å—Ç –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import csv
import psycopg
from datetime import datetime, timezone
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(Path(__file__).parent / '.env')

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è psycopg
db_url = os.getenv("DATABASE_URL", "postgresql://ep:ep@localhost:5432/ep")
if "+psycopg" in db_url:
    db_url = db_url.replace("+psycopg", "")
DB_URL = db_url

def add_places_from_csv(csv_file_path, source_name, category="entertainment"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    conn = psycopg.connect(DB_URL)
    cursor = conn.cursor()
    
    added_count = 0
    skipped_count = 0
    
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {csv_file_path}")
    print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {source_name}")
    print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print("-" * 60)
    
    with open(csv_file_path, 'r', encoding='utf-8') as file:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        sample = file.read(1024)
        file.seek(0)
        
        if '\t' in sample:
            delimiter = '\t'
        else:
            delimiter = ','
        
        reader = csv.DictReader(file, delimiter=delimiter)
        
        for row in reader:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å "Name","Description"
            # –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
            row = { (k or '').strip().lower(): (v or '') for k, v in row.items() }
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV
            name = (row.get('name') or '').strip()
            description = (row.get('description_full') or row.get('description') or '').strip()
            subcategory = (row.get('subcategory') or '').strip()
            source_url = (row.get('source_url') or '').strip()
            
            if not name:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {row}")
                skipped_count += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            cursor.execute('''
                SELECT id FROM places 
                WHERE name = %s AND source = %s
            ''', (name, source_name))
            
            if cursor.fetchone():
                print(f"‚è≠Ô∏è –ú–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
                skipped_count += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ –ø–æ source_url (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –Ω–µ –ø—É—Å—Ç–æ–π)
            if source_url and source_url.strip():
                cursor.execute('''
                    SELECT id FROM places 
                    WHERE source_url = %s
                ''', (source_url,))
                
                if cursor.fetchone():
                    print(f"‚è≠Ô∏è URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {source_url}")
                    skipped_count += 1
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                cursor.execute('''
                    INSERT INTO places (
                        name, 
                        description_full, 
                        category,
                        source, 
                        source_url, 
                        processing_status,
                        scraped_at,
                        updated_at
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', (
                    name,
                    description,
                    category,
                    source_name,
                    source_url if source_url and source_url.strip() else None,
                    'new',
                    datetime.now(timezone.utc),
                    datetime.now(timezone.utc)
                ))
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name}")
                added_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {name}: {e}")
                skipped_count += 1
    
    conn.commit()
    conn.close()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ {csv_file_path}:")
    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
    print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print()
    
    return added_count, skipped_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–´–• –ú–ï–°–¢ –ò–ó CSV –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    csv_files = [
        {
            'path': '../docs/places.csv/+Nightlife___Batch_02__verified__no_photos__24_venues_.csv',
            'source': 'Nightlife Batch 02',
            'category': 'nightlife'
        },
        {
            'path': '../docs/places.csv/+Top_Clubs__Batch_01_.csv',
            'source': 'Top Clubs Batch 01',
            'category': 'nightlife'
        },
        {
            'path': '../docs/places.csv/1_entertainment_places.csv',
            'source': 'Entertainment Places',
            'category': 'entertainment'
        },
        {
            'path': '../docs/places.csv/1.csv',
            'source': 'Restaurants Batch 01',
            'category': 'restaurant'
        }
    ]
    
    total_added = 0
    total_skipped = 0
    
    for csv_file in csv_files:
        if os.path.exists(csv_file['path']):
            added, skipped = add_places_from_csv(
                csv_file['path'], 
                csv_file['source'], 
                csv_file['category']
            )
            total_added += added
            total_skipped += skipped
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file['path']}")
    
    print("üéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_added}")
    print(f"  ‚è≠Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {total_skipped}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –±–∞–∑–µ
    conn = psycopg.connect(DB_URL)
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM places')
    total_places = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM places WHERE processing_status = 'new'")
    new_places = cursor.fetchone()[0]
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print(f"  üìç –í—Å–µ–≥–æ –º–µ—Å—Ç: {total_places}")
    print(f"  üÜï –ù–æ–≤—ã—Ö –º–µ—Å—Ç: {new_places}")
    
    conn.close()

if __name__ == "__main__":
    main()
