#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
"""

import csv
import json
import requests
import time
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CSV_FILE = "/Users/user/entertainment planner/docs/places.csv/racquet___Muay_Thai___Batch_01.csv"
API_BASE = "http://127.0.0.1:8001/api"
BATCH_SIZE = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –º–µ—Å—Ç –∑–∞ —Ä–∞–∑

def load_places_from_csv(file_path: str) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    places = []
    
    with open(file_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row['name'].strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                places.append({
                    'name': row['name'].strip(),
                    'description_full': row['description_full'].strip(),
                    'source_url': row['source_url'].strip()
                })
    
    return places

def create_place_payload(place_data: Dict[str, Any], place_id: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ–º payload –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞"""
    return {
        "id": place_id,
        "name": place_data['name'],
        "description_full": place_data['description_full'],
        "category": "fitness_gym",  # Muay Thai gyms
        "tags_csv": "",
        "summary": "",
        "hours_json": None,
        "gmaps_url": ""
    }

def process_place_with_gpt(payload: Dict[str, Any]) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GPT API"""
    try:
        response = requests.post(
            f"{API_BASE}/places/summarize",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {payload['name']}: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {payload['name']}: {e}")
        return None

def save_processed_place(place_data: Dict[str, Any], gpt_result: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ
        create_payload = {
            "name": place_data['name'],
            "description": gpt_result.get('summary', ''),
            "category": gpt_result.get('tags', [{}])[0].split(':')[1] if gpt_result.get('tags') else 'fitness_gym',
            "tags_csv": ','.join(gpt_result.get('tags', [])),
            "summary": gpt_result.get('summary', ''),
            "lat": 13.7563,  # Bangkok center
            "lng": 100.5018,
            "source": "muay_thai_batch_01",
            "source_url": place_data['source_url'],
            "processing_status": "published"
        }
        
        response = requests.post(
            f"{API_BASE}/places",
            json=create_payload,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {place_data['name']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {place_data['name']}: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {place_data['name']}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Muay Thai –º–µ—Å—Ç...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ –∏–∑ CSV
    places = load_places_from_csv(CSV_FILE)
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(places)} –º–µ—Å—Ç –∏–∑ CSV")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ –±–∞—Ç—á–∞–º–∏
    for i in range(0, len(places), BATCH_SIZE):
        batch = places[i:i+BATCH_SIZE]
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {i//BATCH_SIZE + 1} ({len(batch)} –º–µ—Å—Ç)")
        
        for j, place_data in enumerate(batch):
            place_id = f"muay_thai_{i+j+1:03d}"
            print(f"\nüìç {j+1}/{len(batch)}: {place_data['name']}")
            
            # –°–æ–∑–¥–∞–µ–º payload
            payload = create_place_payload(place_data, place_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ GPT
            gpt_result = process_place_with_gpt(payload)
            
            if gpt_result:
                print(f"ü§ñ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"   Summary: {gpt_result.get('summary', 'N/A')[:100]}...")
                print(f"   Tags: {len(gpt_result.get('tags', []))} —Ç–µ–≥–æ–≤")
                print(f"   Confidence: {gpt_result.get('confidence', 'N/A')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                save_processed_place(place_data, gpt_result)
            else:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {place_data['name']} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if i + BATCH_SIZE < len(places):
            print(f"\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
            time.sleep(3)
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(places)} –º–µ—Å—Ç.")

if __name__ == "__main__":
    main()
