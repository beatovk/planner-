#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å + AI Editor Agent
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.services.google_places import GooglePlaces
from apps.places.workers.ai_editor import AIEditorAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_google_enricher_with_photos():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º Google Places –∫–ª–∏–µ–Ω—Ç
    try:
        google_client = GooglePlaces()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Google Places –∫–ª–∏–µ–Ω—Ç: {e}")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º...")
        google_client = GooglePlaces(mock_mode=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    test_place_id = "ChIJY_tN0qCf4jARTp6Wg5ZCu0w"  # Kurasu Thonglor
    
    try:
        photo_url = google_client.get_place_photos(test_place_id)
        
        if photo_url:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {photo_url[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ URL
            if 'googleusercontent.com' in photo_url:
                logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è Google Places")
            elif 'unsplash.com' in photo_url:
                logger.info("‚ö†Ô∏è  –ó–∞–≥–ª—É—à–∫–∞ Unsplash")
            else:
                logger.info("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        else:
            logger.info("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")


def test_ai_editor_quality_check():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Editor Agent –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    logger.info("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Editor Agent –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        places = db.query(Place).filter(
            Place.picture_url.isnot(None)
        ).limit(3).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º AI Editor Agent
        agent = AIEditorAgent()
        
        for place in places:
            logger.info(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ {place.name} ---")
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {place.picture_url[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            is_quality = agent._is_quality_real_image(place.picture_url, place)
            
            if is_quality:
                logger.info("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è")
            else:
                logger.info("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—É—á—à—É—é
                better_photo = agent._search_real_place_images(place)
                if better_photo != place.picture_url:
                    logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {better_photo[:50]}...")
                else:
                    logger.info("‚ÑπÔ∏è  –õ—É—á—à–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    finally:
        db.close()


def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
    
    # 1. Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ + —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    logger.info("1Ô∏è‚É£ Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ...")
    
    # 2. AI Editor Agent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
    logger.info("2Ô∏è‚É£ AI Editor Agent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ...")
    
    # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info("3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ï–¥–∏–Ω–æ–µ –º–µ—Å—Ç–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö + —É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    
    # –¢–µ—Å—Ç 1: Google API –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    test_google_enricher_with_photos()
    
    # –¢–µ—Å—Ç 2: AI Editor Agent –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π
    test_ai_editor_quality_check()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    test_full_pipeline()


if __name__ == "__main__":
    main()
