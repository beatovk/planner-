#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ Google Places API
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.workers.ai_editor import AIEditorAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_google_places_photos():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ Google Places API"""
    logger.info("üì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Places API –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ —Å Google Place ID
        places = db.query(Place).filter(
            Place.processing_status == 'published',
            Place.gmaps_place_id.isnot(None)
        ).limit(5).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç —Å Google Place ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º AI Editor Agent
        agent = AIEditorAgent()
        
        results = []
        for i, place in enumerate(places, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {place.name} ---")
            logger.info(f"Google Place ID: {place.gmaps_place_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ Google Places API
            try:
                photo_url = agent._get_google_place_photos(place.gmaps_place_id)
                
                result = {
                    "name": place.name,
                    "place_id": place.gmaps_place_id,
                    "found": photo_url is not None,
                    "url": photo_url or "",
                    "source": "google_places" if photo_url else "none"
                }
                
                results.append(result)
                
                if photo_url:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è Google Places")
                    logger.info(f"   URL: {photo_url[:80]}...")
                else:
                    logger.info(f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
                results.append({
                    "name": place.name,
                    "place_id": place.gmaps_place_id,
                    "found": False,
                    "url": "",
                    "source": "error"
                })
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\n{'='*60}")
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info(f"{'='*60}")
        
        found_count = sum(1 for r in results if r["found"])
        total_count = len(results)
        
        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_count}")
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–π–¥–µ–Ω–æ: {found_count} ({found_count/total_count*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        logger.info(f"\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
        for result in results:
            if result["found"]:
                logger.info(f"  {result['name']}: {result['url'][:50]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        no_photos = [r for r in results if not r["found"]]
        if no_photos:
            logger.info(f"\n–ú–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
            for result in no_photos:
                logger.info(f"  {result['name']} (Place ID: {result['place_id']})")
        
    finally:
        db.close()


def test_google_photo_url():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    logger.info("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    
    # –†–µ–∞–ª—å–Ω—ã–π photo_name –∏–∑ Google Places API
    test_photo_name = "places/ChIJY_tN0qCf4jARTp6Wg5ZCu0w/photos/AciIO2e3xSApBFJcSspLe_0lo_hY_M_s_FP9yUn_KGGsbY8t3wl5T1asYUN88polFuEoAHtEWRsfd1NHIxXMpZixxEADCt3l6EZDn63thvXIZsIecAPDQnQv5tc91Xk9ZAJLVOMqa5MgDiDPD5pzY6Hm2ZsIkLNk_8B4wXUwuYbglIlGM99SRHHnJUon4mTb5A5O933LHD-yvSHhXejq7iJTzRr79jrbISpbJnF0P_SVHyzd3e2D0_w0ZO4OljNDnD67p2YAYYTQ4wbszhEyOoG2Ulcuot0vvZK-v3FZZsUz_7O2Qw"
    
    agent = AIEditorAgent()
    
    try:
        photo_url = agent._get_google_photo_url_new(test_photo_name, "AIzaSyBjExK9M7wOu929zQNbnlFJ8kjr-QreP6w")
        
        if photo_url:
            logger.info(f"‚úÖ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω: {photo_url[:50]}...")
        else:
            logger.info(f"‚ùå URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Places API")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ—Å—Ç
    test_google_places_photos()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    test_google_photo_url()


if __name__ == "__main__":
    main()
