#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç AI Editor Agent —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def simulate_ai_editor_processing(place: Place) -> dict:
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI Editor Agent"""
    
    result = {
        "place_id": place.id,
        "name": place.name,
        "category": place.category,
        "updates": [],
        "issues_fixed": [],
        "quality_improved": False
    }
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
    if not place.price_level:
        # –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = place.category.lower() if place.category else ""
        
        if "bar" in category or "nightclub" in category:
            new_price_level = 3
        elif "restaurant" in category or "cafe" in category:
            new_price_level = 2
        else:
            new_price_level = 2
        
        result["updates"].append(f"price_level: None -> {new_price_level}")
        result["issues_fixed"].append("price_level")
        result["quality_improved"] = True
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–≥–∏
    if not place.tags_csv:
        # –£–º–Ω—ã–µ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = place.category.lower() if place.category else ""
        
        if "bar" in category or "nightclub" in category:
            new_tags = "bar,nightlife,drinks"
        elif "restaurant" in category or "cafe" in category:
            new_tags = "restaurant,food,dining"
        elif "entertainment" in category:
            new_tags = "entertainment,fun,activity"
        else:
            new_tags = "restaurant,food,thai"
        
        result["updates"].append(f"tags_csv: None -> {new_tags}")
        result["issues_fixed"].append("tags")
        result["quality_improved"] = True
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not place.picture_url:
        # Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = place.category.lower() if place.category else ""
        
        if "restaurant" in category:
            new_image = "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400"
        elif "bar" in category or "nightclub" in category:
            new_image = "https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=400"
        elif "cafe" in category:
            new_image = "https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=400"
        else:
            new_image = "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400"
        
        result["updates"].append(f"picture_url: None -> {new_image[:50]}...")
        result["issues_fixed"].append("picture")
        result["quality_improved"] = True
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
    if not place.hours_json:
        # –ü—Ä–æ—Å—Ç—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
        default_hours = {
            "monday": "9:00-22:00",
            "tuesday": "9:00-22:00", 
            "wednesday": "9:00-22:00",
            "thursday": "9:00-22:00",
            "friday": "9:00-23:00",
            "saturday": "9:00-23:00",
            "sunday": "9:00-22:00"
        }
        
        result["updates"].append(f"hours_json: None -> {len(default_hours)} days")
        result["issues_fixed"].append("hours")
        result["quality_improved"] = True
    
    return result


def test_improved_ai_editor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI Editor Agent"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI Editor Agent")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º 10 –º–µ—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º published
        places = db.query(Place).filter(
            Place.processing_status == 'published'
        ).order_by(Place.id.desc()).limit(10).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(places)} –º–µ—Å—Ç")
        
        results = []
        total_improvements = 0
        
        for i, place in enumerate(places, 1):
            logger.info(f"\n--- –ú–µ—Å—Ç–æ {i}: {place.name} ---")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            before_issues = []
            if not place.price_level:
                before_issues.append("price_level")
            if not place.tags_csv:
                before_issues.append("tags")
            if not place.picture_url:
                before_issues.append("picture")
            if not place.hours_json:
                before_issues.append("hours")
            
            logger.info(f"–ü—Ä–æ–±–ª–µ–º –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(before_issues)}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI Editor
            result = simulate_ai_editor_processing(place)
            results.append(result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if result["updates"]:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(result['updates'])}")
                for update in result["updates"]:
                    logger.info(f"  - {update}")
                total_improvements += len(result["updates"])
            else:
                logger.info("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\n{'='*60}")
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info(f"{'='*60}")
        
        places_improved = sum(1 for r in results if r["quality_improved"])
        total_updates = sum(len(r["updates"]) for r in results)
        
        logger.info(f"–ú–µ—Å—Ç —É–ª—É—á—à–µ–Ω–æ: {places_improved}/{len(places)} ({places_improved/len(places)*100:.1f}%)")
        logger.info(f"–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {total_updates}")
        logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –º–µ—Å—Ç–æ: {total_updates/len(places):.1f}")
        
        # –¢–æ–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        all_issues_fixed = []
        for result in results:
            all_issues_fixed.extend(result["issues_fixed"])
        
        issue_counts = {}
        for issue in all_issues_fixed:
            issue_counts[issue] = issue_counts.get(issue, 0) + 1
        
        logger.info(f"\n–¢–æ–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
        for issue, count in sorted(issue_counts.items(), key=lambda x: x[1], reverse=True):
            logger.info(f"  {issue}: {count} —Ä–∞–∑")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–∏–π
        logger.info(f"\n–ü—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–∏–π:")
        for result in results[:3]:
            if result["updates"]:
                logger.info(f"  {result['name']}: {', '.join(result['issues_fixed'])}")
        
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI Editor Agent")
    test_improved_ai_editor()


if __name__ == "__main__":
    main()
