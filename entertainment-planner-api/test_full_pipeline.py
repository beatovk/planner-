#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ ‚Üí —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ‚Üí –æ–±–æ–≥–∞—â–µ–Ω–∏–µ Google API ‚Üí AI Editor –ø—Ä–æ–≤–µ—Ä–∫–∞
"""

import os
import sys
import csv
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.services.google_places import GooglePlaces
from apps.places.workers.ai_editor import AIEditorAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def load_places_from_csv(csv_file_path: str) -> list:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Å—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Å—Ç –∏–∑ {csv_file_path}")
    
    places = []
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file, delimiter='\t')
            
            for row in reader:
                place_data = {
                    'name': row.get('name', '').strip(),
                    'description_full': row.get('description_full', '').strip()
                }
                
                if place_data['name'] and place_data['description_full']:
                    places.append(place_data)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(places)} –º–µ—Å—Ç –∏–∑ CSV")
        return places
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        return []


def insert_places_to_db(places_data: list) -> list:
    """–í—Å—Ç–∞–≤–∫–∞ –º–µ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üíæ –í—Å—Ç–∞–≤–∫–∞ –º–µ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    db = SessionLocal()
    inserted_places = []
    
    try:
        for place_data in places_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ
            existing = db.query(Place).filter(Place.name == place_data['name']).first()
            if existing:
                logger.info(f"‚ö†Ô∏è  –ú–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {place_data['name']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
            place = Place(
                name=place_data['name'],
                description_full=place_data['description_full'],
                source='csv_import',
                source_url=f"csv_import_{place_data['name'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                scraped_at=datetime.now(),
                processing_status='new'
            )
            
            db.add(place)
            inserted_places.append(place)
        
        db.commit()
        logger.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(inserted_places)} –Ω–æ–≤—ã—Ö –º–µ—Å—Ç –≤ –ë–î")
        return inserted_places
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î: {e}")
        db.rollback()
        return []
    finally:
        db.close()


def summarize_places(places: list) -> list:
    """–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT"""
    logger.info("ü§ñ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT")
    
    from apps.places.workers.gpt_normalizer import GPTNormalizerWorker
    
    summarizer = GPTNormalizerWorker()
    summarized_places = []
    
    db = SessionLocal()
    try:
        for place in places:
            try:
                logger.info(f"–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {place.name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –∏–∑ –ë–î –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π
                db_place = db.query(Place).filter(Place.id == place.id).first()
                if not db_place:
                    logger.warning(f"–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {place.name}")
                    continue
                
                # –°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –º–µ—Å—Ç–æ
                summarizer._process_place(db_place, db)
                
                if db_place.processing_status == 'summarized':
                    summarized_places.append(db_place)
                    logger.info(f"‚úÖ –°–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {db_place.name}")
                else:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ {db_place.name}: {db_place.last_error}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ {place.name}: {e}")
        
        db.commit()
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(summarized_places)} —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        db.rollback()
    finally:
        db.close()
    
    return summarized_places


def enrich_with_google_api(places: list) -> list:
    """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –º–µ—Å—Ç –¥–∞–Ω–Ω—ã–º–∏ Google API"""
    logger.info("üåç –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ Google API")
    
    # –°–æ–∑–¥–∞–µ–º Google Places –∫–ª–∏–µ–Ω—Ç
    try:
        google_client = GooglePlaces()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Google Places –∫–ª–∏–µ–Ω—Ç: {e}")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º...")
        google_client = GooglePlaces(mock_mode=True)
    
    enriched_places = []
    
    for place in places:
        try:
            logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–∏–µ: {place.name}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –º–µ—Å—Ç–æ
            from apps.places.commands.enrich_google import enrich_one_place
            success, message = enrich_one_place(place, google_client)
            
            if success:
                place.processing_status = 'published'
                enriched_places.append(place)
                logger.info(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ: {place.name}")
            else:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è {place.name}: {message}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è {place.name}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    db = SessionLocal()
    try:
        for place in enriched_places:
            db.merge(place)
        db.commit()
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(enriched_places)} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {e}")
        db.rollback()
    finally:
        db.close()
    
    return enriched_places


def ai_editor_verification(places: list) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç AI Editor Agent"""
    logger.info("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Editor Agent")
    
    ai_editor = AIEditorAgent()
    verified_places = []
    
    for place in places:
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ AI Editor: {place.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ
            result = ai_editor._process_place(place)
            
            if result:
                verified_places.append(place)
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ AI Editor: {place.name}")
            else:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI Editor: {place.name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI Editor {place.name}: {e}")
    
    return verified_places


def show_results(places: list):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("\n" + "="*60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
    logger.info("="*60)
    
    for i, place in enumerate(places, 1):
        logger.info(f"\n--- –ú–µ—Å—Ç–æ {i}: {place.name} ---")
        logger.info(f"–°—Ç–∞—Ç—É—Å: {place.processing_status}")
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {place.category}")
        logger.info(f"–¢–µ–≥–∏: {place.tags_csv}")
        logger.info(f"–¶–µ–Ω–∞: {place.price_level}")
        logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place.lat}, {place.lng}")
        logger.info(f"Google Place ID: {place.gmaps_place_id}")
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {place.picture_url[:50] if place.picture_url else '–ù–µ—Ç'}...")
        logger.info(f"AI –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {place.ai_verified}")
        
        if place.summary:
            logger.info(f"–°–∞–º–º–∞—Ä–∏: {place.summary[:100]}...")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç")
    
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_file_path = "test_places.csv"
    
    # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV
    places_data = load_places_from_csv(csv_file_path)
    if not places_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV")
        return
    
    # –≠—Ç–∞–ø 2: –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
    inserted_places = insert_places_to_db(places_data)
    if not inserted_places:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–∞ –≤ –ë–î")
        return
    
    # –≠—Ç–∞–ø 3: –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    summarized_places = summarize_places(inserted_places)
    if not summarized_places:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞")
        return
    
    # –≠—Ç–∞–ø 4: –û–±–æ–≥–∞—â–µ–Ω–∏–µ Google API
    enriched_places = enrich_with_google_api(summarized_places)
    if not enriched_places:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–≥–∞—Ç–∏—Ç—å –º–µ—Å—Ç–∞ Google API")
        return
    
    # –≠—Ç–∞–ø 5: AI Editor –ø—Ä–æ–≤–µ—Ä–∫–∞
    verified_places = ai_editor_verification(enriched_places)
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_results(verified_places)
    
    logger.info(f"\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(verified_places)} –º–µ—Å—Ç")


if __name__ == "__main__":
    main()
