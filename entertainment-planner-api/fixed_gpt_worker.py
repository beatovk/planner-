#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GPT –≤–æ—Ä–∫–µ—Ä —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
"""

import os
import sys
import time
import logging
from pathlib import Path
from datetime import datetime, timezone, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.workers.gpt_client import GPTClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FixedGPTWorker:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞"""
    
    def __init__(self, batch_size=1):
        self.batch_size = batch_size
        self.api_key = self._get_api_key()
        self.gpt_client = GPTClient(self.api_key)
        self.processed_count = 0
        self.error_count = 0
        self.success_count = 0
        
    def _get_api_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return api_key
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ worker'–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fixed GPT Worker...")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
        
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                places = self._get_places_to_process()
                
                if not places:
                    logger.info("‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    break
                
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –∏–∑ {len(places)} –∑–∞–ø–∏—Å–µ–π")
                
                for place in places:
                    try:
                        self._process_single_place(place)
                        self.success_count += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
                        self.error_count += 1
                        self._mark_as_error(place, str(e))
                
                self.processed_count += len(places)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
    
    def _get_places_to_process(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á: 'new' –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ 'error' —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ä—ã–º updated_at
            cutoff = datetime.now(timezone.utc) - timedelta(minutes=30)
            places = (
                db.query(Place)
                .filter(
                    (
                        (Place.processing_status == 'new')
                    ) | (
                        (Place.processing_status == 'error') &
                        ((Place.updated_at.is_(None)) | (Place.updated_at < cutoff))
                    )
                )
                .limit(self.batch_size)
                .all()
            )
            return places
        finally:
            db.close()
    
    def _process_single_place(self, place: Place):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ: {place.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        if not place.description_full or not str(place.description_full).strip():
            logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫: –ø—É—Å—Ç–æ–π description_full")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é –º–µ—Å—Ç–∞
            fresh_place = db.query(Place).filter(Place.id == place.id).first()
            if not fresh_place:
                logger.warning(f"‚ö†Ô∏è –ú–µ—Å—Ç–æ {place.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ GPT
            payload = {
                'id': fresh_place.id,
                'name': fresh_place.name,
                'description_full': fresh_place.description_full,
                'category': fresh_place.category,
                'source': fresh_place.source
            }
            result = self.gpt_client.normalize_place_data(payload)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ
                fresh_place.category = result.get('category', fresh_place.category)
                fresh_place.summary = result.get('summary', fresh_place.summary)
                fresh_place.tags_csv = result.get('tags_csv', fresh_place.tags_csv)
                fresh_place.processing_status = 'summarized'
                fresh_place.updated_at = datetime.now(timezone.utc)
                fresh_place.signals = result.get('signals', {})
                
                db.commit()
                logger.info(f"‚úÖ –ú–µ—Å—Ç–æ {fresh_place.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è GPT –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {fresh_place.name}")
                
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
            raise
        finally:
            db.close()
    
    def _mark_as_error(self, place: Place, error_msg: str):
        """–ü–æ–º–µ—á–∞–µ–º –º–µ—Å—Ç–æ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–µ"""
        db = SessionLocal()
        try:
            fresh_place = db.query(Place).filter(Place.id == place.id).first()
            if fresh_place:
                fresh_place.processing_status = 'error'
                fresh_place.last_error = error_msg
                fresh_place.updated_at = datetime.now(timezone.utc)
                db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –º–µ—Å—Ç–∞ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–≥–æ: {e}")
        finally:
            db.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Fixed GPT Worker')
    parser.add_argument('--batch-size', type=int, default=1, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    print("üîë API –∫–ª—é—á: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("-" * 50)
    
    worker = FixedGPTWorker(batch_size=args.batch_size)
    worker.run()

if __name__ == "__main__":
    main()
