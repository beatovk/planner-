#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –º–µ—Å—Ç –±–µ–∑ —Å–ª–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö
"""

import os
import sys
import psycopg
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from apps.places.services.google_places import GooglePlaces

def clean_name(name):
    """–£–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ —Å–∫–æ–±–∫–∞—Ö
    cleaned = re.sub(r'\s*\([^)]*\)', '', name)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = cleaned.strip()
    return cleaned

def enrich_places_without_brackets():
    """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Google Places API –±–µ–∑ —Å–ª–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö"""
    
    print("üåç –û–±–æ–≥–∞—â–µ–Ω–∏–µ –º–µ—Å—Ç –±–µ–∑ —Å–ª–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg.connect('postgresql://ep:ep@localhost:5432/ep')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ Google –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
        SELECT id, name, category
        FROM places 
        WHERE source = 'timeout_bangkok' 
        AND processing_status = 'summarized'
        AND (lat IS NULL OR gmaps_place_id IS NULL)
        ORDER BY name
        ''')
        places = cursor.fetchall()
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(places)} –º–µ—Å—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
        
        if not places:
            print("‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –æ–±–æ–≥–∞—â–µ–Ω—ã!")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Places —Å–µ—Ä–≤–∏—Å
        google_service = GooglePlaces()
        
        updated_count = 0
        error_count = 0
        
        for i, (place_id, name, category) in enumerate(places, 1):
            print(f"üîÑ {i}/{len(places)}: {name}")
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ª–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö
            clean_name_str = clean_name(name)
            print(f"   üßπ –û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{clean_name_str}'")
            
            try:
                # –ò—â–µ–º –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ Google Places API —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                search_result = google_service.find_place(f"{clean_name_str} Bangkok")
                
                if search_result and 'place_id' in search_result:
                    place_id_google = search_result['place_id']
                    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –≤ Google: {search_result.get('name', 'N/A')}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞
                    place_details = google_service.place_details(place_id_google)
                    
                    if place_details:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ price_level
                        cursor.execute('''
                        UPDATE places 
                        SET lat = %s, lng = %s, address = %s, 
                            gmaps_place_id = %s, gmaps_url = %s,
                            business_status = %s, utc_offset_minutes = %s,
                            category = %s, rating = %s, picture_url = %s,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = %s
                        ''', (
                            place_details.get('lat'),
                            place_details.get('lng'),
                            place_details.get('formatted_address'),
                            place_id_google,
                            f"https://www.google.com/maps/place/?q=place_id:{place_id_google}",
                            place_details.get('business_status'),
                            place_details.get('utc_offset'),
                            place_details.get('types', [category])[0] if place_details.get('types') else category,
                            place_details.get('rating'),
                            place_details.get('photo_reference'),
                            place_id
                        ))
                        
                        print(f"   ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ: {place_details.get('rating', 'N/A')}/5.0")
                        updated_count += 1
                    else:
                        print(f"   ‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        error_count += 1
                else:
                    print(f"   ‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Google Places")
                    error_count += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                error_count += 1
                continue
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –º–µ—Å—Ç")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count} –º–µ—Å—Ç")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {updated_count/(updated_count+error_count)*100:.1f}%")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.getenv('GOOGLE_MAPS_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: GOOGLE_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    print("üîë Google Maps API –∫–ª—é—á: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("-" * 50)
    
    enrich_places_without_brackets()
