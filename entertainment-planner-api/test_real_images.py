#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Å—Ç
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.workers.ai_editor import AIEditorAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_real_image_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    logger.info("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º 5 –º–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        places = db.query(Place).filter(
            Place.processing_status == 'published'
        ).order_by(Place.id.desc()).limit(5).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º AI Editor Agent
        agent = AIEditorAgent()
        
        results = []
        for i, place in enumerate(places, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {place.name} ({place.category}) ---")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_result = agent._find_quality_images(place)
            
            result = {
                "name": place.name,
                "category": place.category,
                "found": image_result.get("found", False),
                "url": image_result.get("url", ""),
                "source": image_result.get("source", ""),
                "quality": image_result.get("quality", "")
            }
            
            results.append(result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result["found"]:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                logger.info(f"   URL: {result['url'][:80]}...")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
                logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality']}")
            else:
                logger.info(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\n{'='*60}")
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info(f"{'='*60}")
        
        found_count = sum(1 for r in results if r["found"])
        real_images = sum(1 for r in results if r["found"] and r["source"] == "real_search")
        placeholder_images = sum(1 for r in results if r["found"] and r["source"] == "placeholder")
        
        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {found_count} ({found_count/len(results)*100:.1f}%)")
        logger.info(f"–†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {real_images}")
        logger.info(f"Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {placeholder_images}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        logger.info(f"\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        for result in results:
            if result["found"]:
                logger.info(f"  {result['name']}: {result['url'][:50]}... ({result['source']})")
        
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    test_real_image_search()


if __name__ == "__main__":
    main()
