#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏–π –º–µ—Å—Ç.
"""

import time
import os
import sys
import psycopg
from datetime import datetime, timezone
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(Path(__file__).parent / '.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è psycopg
db_url = os.getenv("DATABASE_URL", "postgresql://ep:ep@localhost:5432/ep")
if "+psycopg" in db_url:
    db_url = db_url.replace("+psycopg", "")
DB_URL = db_url

def get_processing_progress():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç –∏–∑ –ë–î."""
    conn = None
    try:
        conn = psycopg.connect(DB_URL)
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤—ã–º –ø–∞—Ä—Ç–∏—è–º
        cursor.execute('''
            SELECT 
                source,
                COUNT(*) as total_places,
                COUNT(CASE WHEN processing_status = 'summarized' THEN 1 END) as summarized,
                COUNT(CASE WHEN processing_status = 'new' THEN 1 END) as new,
                COUNT(CASE WHEN processing_status = 'error' THEN 1 END) as error
            FROM places
            WHERE source IN ('bangkok_malls', 'bangkok_food_batch_08', 'bkk_food_batch_11')
            GROUP BY source
            ORDER BY source
        ''')
        source_stats = cursor.fetchall()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
        cursor.execute('''
            SELECT name, summary, source, updated_at
            FROM places
            WHERE source IN ('bangkok_malls', 'bangkok_food_batch_08', 'bkk_food_batch_11')
            AND processing_status = 'summarized'
            ORDER BY updated_at DESC
            LIMIT 5
        ''')
        last_processed = cursor.fetchall()

        return source_stats, last_processed
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return [], []
    finally:
        if conn:
            conn.close()

def display_progress():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ."""
    while True:
        os.system('clear') # –û—á–∏—â–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
        print("üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ì–†–ï–°–°–ê –û–ë–†–ê–ë–û–¢–ö–ò –ù–û–í–´–• –ü–ê–†–¢–ò–ô")
        print("=" * 60)

        source_stats, last_processed = get_processing_progress()

        if not source_stats:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
            print(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            time.sleep(5)
            continue

        total_places = sum(count for _, count, _, _, _ in source_stats)
        total_summarized = sum(summarized for _, _, summarized, _, _ in source_stats)
        total_new = sum(new for _, _, _, new, _ in source_stats)
        total_error = sum(error for _, _, _, _, error in source_stats)

        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –º–µ—Å—Ç: {total_places}")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_summarized}/{total_places} ({total_summarized/total_places*100:.1f}%)")
        print(f"   üîÑ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {total_new}/{total_places} ({total_new/total_places*100:.1f}%)")
        print(f"   ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {total_error}/{total_places} ({total_error/total_places*100:.1f}%)")

        print(f"\nüìÇ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ê–†–¢–ò–Ø–ú:")
        for source, total, summarized, new, error in source_stats:
            print(f"   {source}:")
            print(f"     –í—Å–µ–≥–æ: {total} | ‚úÖ {summarized} | üîÑ {new} | ‚ùå {error}")

        if last_processed:
            print(f"\nüéØ –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ú–ï–°–¢–ê:")
            for name, summary, source, updated_at in last_processed:
                print(f"  - {name} ({source})")
                print(f"    üìù {summary[:70]}..." if summary else "    üìù –ù–µ—Ç —Å–∞–º–º–∞—Ä–∏")
                print(f"    ‚è∞ {updated_at.strftime('%H:%M:%S')}")
                print()
        else:
            print("\n–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç.")

        print(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        time.sleep(5)

if __name__ == "__main__":
    display_progress()
