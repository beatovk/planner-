#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
1. –ü–∞—Ä—Å–µ—Ä—ã (TimeOut, BK Magazine)
2. GPT –°–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
3. Google API –û–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å
4. AI Editor Agent (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
"""

import os
import sys
import subprocess
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def run_command(command: list, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    logger.info(f"üöÄ {description}")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        logger.info(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            logger.info(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        logger.error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            logger.error(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            logger.error(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    logger.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    commands = [
        {
            "command": ["python", "apps/places/commands/run_gpt_worker.py", "--batch-size", "10"],
            "description": "GPT –°–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç"
        },
        {
            "command": ["python", "apps/places/commands/enrich_google.py", "--batch-size", "20"],
            "description": "Google API –û–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –¥–µ—Ç–∞–ª–µ–π"
        },
        {
            "command": ["python", "apps/places/commands/run_ai_editor.py", "--batch-size", "5"],
            "description": "AI Editor Agent - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        }
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    success_count = 0
    total_commands = len(commands)
    
    for i, cmd_info in enumerate(commands, 1):
        logger.info(f"\n{'='*60}")
        logger.info(f"–≠—Ç–∞–ø {i}/{total_commands}: {cmd_info['description']}")
        logger.info(f"{'='*60}")
        
        if run_command(cmd_info['command'], cmd_info['description']):
            success_count += 1
            logger.info(f"‚úÖ –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"‚ùå –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
            # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            # logger.error("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            # break
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        if i < total_commands:
            logger.info("‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º...")
            time.sleep(5)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(f"\n{'='*60}")
    logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    logger.info(f"{'='*60}")
    logger.info(f"–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {total_commands}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}")
    logger.info(f"–û—à–∏–±–æ–∫: {total_commands - success_count}")
    logger.info(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if success_count == total_commands:
        logger.info("üéâ –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1


def run_individual_stage(stage: str):
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    stages = {
        "gpt": {
            "command": ["python", "apps/places/commands/run_gpt_worker.py", "--batch-size", "10"],
            "description": "GPT –°–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä"
        },
        "google": {
            "command": ["python", "apps/places/commands/enrich_google.py", "--batch-size", "20"],
            "description": "Google API –û–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å"
        },
        "ai_editor": {
            "command": ["python", "apps/places/commands/run_ai_editor.py", "--batch-size", "5"],
            "description": "AI Editor Agent"
        }
    }
    
    if stage not in stages:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage}")
        logger.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã: {', '.join(stages.keys())}")
        return 1
    
    cmd_info = stages[stage]
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: {cmd_info['description']}")
    
    if run_command(cmd_info['command'], cmd_info['description']):
        logger.info("‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return 0
    else:
        logger.error("‚ùå –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
        return 1


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--stage', choices=['gpt', 'google', 'ai_editor'], 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ç–∞–ø')
    parser.add_argument('--verbose', '-v', action='store_true', 
                       help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    if args.stage:
        # –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
        exit_code = run_individual_stage(args.stage)
    else:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
        exit_code = main()
    
    sys.exit(exit_code)
