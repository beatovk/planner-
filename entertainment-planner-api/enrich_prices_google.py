#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ Google Places API.
–ò—â–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ price_level –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Ö —á–µ—Ä–µ–∑ Google Places API.
"""

import time
from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.services.google_places import GooglePlaces
from sqlalchemy import and_, or_

def enrich_prices_google(batch_size=50, max_places=200):
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Google Places API –¥–ª—è –º–µ—Å—Ç –±–µ–∑ price_level.
    """
    db = SessionLocal()
    google_client = GooglePlaces()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞ –±–µ–∑ price_level, –Ω–æ —Å gmaps_place_id
        places = db.query(Place).filter(
            and_(
                Place.price_level.is_(None),
                Place.gmaps_place_id.isnot(None),
                Place.gmaps_place_id != ''
            )
        ).limit(max_places).all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(places)} –º–µ—Å—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ü–µ–Ω")
        
        updated_count = 0
        error_count = 0
        
        for i, place in enumerate(places):
            if i >= max_places:
                break
                
            try:
                print(f"[{i+1}/{len(places)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {place.name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞ –∏–∑ Google Places API
                details = google_client.place_details(place.gmaps_place_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º price_level –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                if details.get("priceLevel") is not None:
                    price_level = details["priceLevel"]
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ price levels –≤ —á–∏—Å–ª–∞
                    if isinstance(price_level, str):
                        price_map = {
                            "PRICE_LEVEL_FREE": 0,
                            "PRICE_LEVEL_INEXPENSIVE": 1,
                            "PRICE_LEVEL_MODERATE": 2,
                            "PRICE_LEVEL_EXPENSIVE": 3,
                            "PRICE_LEVEL_VERY_EXPENSIVE": 4
                        }
                        price_level = price_map.get(price_level, price_level)
                    
                    place.price_level = price_level
                    updated_count += 1
                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω price_level: {price_level}")
                else:
                    print(f"  ‚ùå Price level –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ batch_size –º–µ—Å—Ç
                if (i + 1) % batch_size == 0:
                    db.commit()
                    print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {batch_size} –º–µ—Å—Ç")
                    time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    
            except Exception as e:
                error_count += 1
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {place.name}: {e}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        db.commit()
        
        print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—Ç: {len(places)}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {updated_count}")
        print(f"–û—à–∏–±–æ–∫: {error_count}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {updated_count/len(places)*100:.1f}%")
        
    finally:
        db.close()


def test_specific_places():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö."""
    test_places = [
        "Gaggan Anand",
        "Le Normandie", 
        "Jay Fai",
        "Thip Samai",
        "Ki Izakaya"
    ]
    
    db = SessionLocal()
    google_client = GooglePlaces()
    
    try:
        for place_name in test_places:
            place = db.query(Place).filter(Place.name.ilike(f'%{place_name}%')).first()
            if place:
                print(f"\n=== {place.name} ===")
                print(f"Place ID: {place.gmaps_place_id}")
                print(f"–¢–µ–∫—É—â–∏–π price_level: {place.price_level}")
                
                if place.gmaps_place_id:
                    details = google_client.place_details(place.gmaps_place_id)
                    api_price = details.get("priceLevel")
                    print(f"Google API price_level: {api_price}")
                    
                    if api_price and place.price_level is None:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                        if isinstance(api_price, str):
                            price_map = {
                                "PRICE_LEVEL_FREE": 0,
                                "PRICE_LEVEL_INEXPENSIVE": 1,
                                "PRICE_LEVEL_MODERATE": 2,
                                "PRICE_LEVEL_EXPENSIVE": 3,
                                "PRICE_LEVEL_VERY_EXPENSIVE": 4
                            }
                            api_price = price_map.get(api_price, api_price)
                        
                        place.price_level = api_price
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω price_level: {api_price}")
                    else:
                        print("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å")
            else:
                print(f"‚ùå –ú–µ—Å—Ç–æ {place_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        db.commit()
        
    finally:
        db.close()


if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç ===")
    test_specific_places()
    
    print("\n=== –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ ===")
    enrich_prices_google(batch_size=20, max_places=100)
