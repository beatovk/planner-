const API_BASE = `${window.location.origin}/api`;

/* ---------- State ---------- */
const GOOGLE_MAPS_MAX_WAYPOINTS = 23; // –ª–∏–º–∏—Ç waypoints –≤ —Å—Å—ã–ª–∫–∞—Ö Google Maps

const state = {
  steps: [],             // [{label, query, results:[], selected:null}]
  // Default home location (Bangkok). Can be overridden by Home button or geolocation
  user: { lat:13.744262, lng:100.561473 },
  anchor: null,          // {id, lat, lng, name, stepIndex} ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
  searchMode: 'surprise',  // 'surprise' mode by default
  highExperienceFilter: false,  // —Ñ–∏–ª—å—Ç—Ä –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
  selectedArea: null,     // selected area name (deprecated)
  selectedPlaces: [],    // –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  googleMap: null,       // —ç–∫–∑–µ–º–ø–ª—è—Ä Google Maps
  googleMapsLoaded: false, // —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
  mapMarkers: [],        // –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
  directionsService: null, // Google DirectionsService
  directionsRenderer: null, // Google DirectionsRenderer
  selectedVibe: null,    // –≤—ã–±—Ä–∞–Ω–Ω—ã–π vibe
  selectedEnergy: null,  // –≤—ã–±—Ä–∞–Ω–Ω—ã–π energy
  vibeCaption: null,     // –ø–æ–¥–ø–∏—Å—å –¥–ª—è vibe —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  vibeEmptyState: false  // —Ñ–ª–∞–≥ empty state –¥–ª—è vibe
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞
const scrollPositions = {};

function saveScrollPositions() {
  const rails = document.querySelectorAll('.rail__scroll');
  rails.forEach((rail, index) => {
    scrollPositions[index] = rail.scrollLeft;
  });
}

function restoreScrollPositions() {
  const rails = document.querySelectorAll('.rail__scroll');
  rails.forEach((rail, index) => {
    if (scrollPositions[index] !== undefined) {
      rail.scrollLeft = scrollPositions[index];
    }
  });
}

/* ---------- Utils ---------- */
const $ = (s,ctx=document)=>ctx.querySelector(s);
const $all = (s,ctx=document)=>[...ctx.querySelectorAll(s)];
const haversineM = (a,b)=>{
  if(!a||!b) return null;
  const R = 6371000;
  const toRad = x => x*Math.PI/180;
  const dLat = toRad(b.lat-a.lat), dLng = toRad(b.lng-a.lng);
  const s1 = Math.sin(dLat/2)**2 + Math.cos(toRad(a.lat))*Math.cos(toRad(b.lat))*Math.sin(dLng/2)**2;
  return 2*R*Math.asin(Math.sqrt(s1));
};
const formatDistance = m => {
  if (m == null) return "‚Äî";
  if (m < 1000) return `${Math.round(m)}m`;
  return `${(m/1000).toFixed(1)}km`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–µ—Å—Ç –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏
function sortPlacesByDistance(places, referencePoint) {
  if (!referencePoint) return places;
  
  return places.map(place => ({
    ...place,
    distance: haversineM(referencePoint, { lat: place.lat, lng: place.lng })
  })).sort((a, b) => (a.distance || Infinity) - (b.distance || Infinity));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –º–µ—Å—Ç–∞–º–∏
function getMidpoint(place1, place2) {
  if (!place1 || !place2) return null;
  return {
    lat: (place1.lat + place2.lat) / 2,
    lng: (place1.lng + place2.lng) / 2
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getReferencePointForCategory(stepIndex) {
  console.log(`Getting reference point for step ${stepIndex}:`);
  console.log(`Anchor:`, state.anchor);
  console.log(`User location:`, state.user);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —è–∫–æ—Ä—å –∏ —ç—Ç–æ –Ω–µ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∫–æ—Ä—å
  if (state.anchor && state.anchor.stepIndex !== stepIndex) {
    const result = { lat: state.anchor.lat, lng: state.anchor.lng };
    console.log(`Using anchor:`, result);
    return result;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —è–∫–æ—Ä—è ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (state.user.lat && state.user.lng) {
    const result = { lat: state.user.lat, lng: state.user.lng };
    console.log(`Using user location:`, result);
    return result;
  }
  
  // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const currentStep = state.steps[stepIndex];
  if (currentStep && currentStep.results && currentStep.results.length > 0) {
    const firstPlace = currentStep.results[0];
    if (firstPlace.lat && firstPlace.lng) {
      const result = { lat: firstPlace.lat, lng: firstPlace.lng };
      console.log(`Fallback to first place:`, result);
      return result;
    }
  }
  
  console.log(`No reference point available`);
  return null;
}

/* ---------- Frontend Filtering ---------- */
function filterPlacesByQuery(places, query) {
  if (!query || !query.trim()) return places;
  
  const searchTerms = query.toLowerCase().split(/\s+/).filter(term => term.length > 0);
  if (searchTerms.length === 0) return places;
  
  return places.filter(place => {
    const searchableText = [
      place.name || '',
      place.summary || '',
      place.tags_csv || '',
      place.category || ''
    ].join(' ').toLowerCase();
    
    // –í—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
    return searchTerms.every(term => searchableText.includes(term));
  }).sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
    const scoreA = getRelevanceScore(a, searchTerms);
    const scoreB = getRelevanceScore(b, searchTerms);
    return scoreB - scoreA;
  });
}

function getRelevanceScore(place, searchTerms) {
  const searchableText = [
    place.name || '',
    place.summary || '',
    place.tags_csv || '',
    place.category || ''
  ].join(' ').toLowerCase();
  
  let score = 0;
  searchTerms.forEach(term => {
    // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–º–µ–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
    if (place.name && place.name.toLowerCase().includes(term)) score += 3;
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–º–µ–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å
    if (place.category && place.category.toLowerCase().includes(term)) score += 2;
    // –¢–µ–≥–∏ –∏–º–µ—é—Ç —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å
    if (place.tags_csv && place.tags_csv.toLowerCase().includes(term)) score += 2;
    // –û–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –≤–µ—Å
    if (place.summary && place.summary.toLowerCase().includes(term)) score += 1;
  });
  
  return score;
}

/* ---------- API ---------- */
async function searchPlaces(q, limit=12, area=null){
  // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö step'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
  // Netflix-style API –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ compose pipeline
  return searchPlacesByQuery(q, limit, area);
}

async function searchPlacesNetflixStyle(q, limit=12, area=null){
  try {
    console.log('üåê Netflix-style search for:', q);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    const parseResponse = await fetch(`${API_BASE}/parse`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: q,
        area: area,
        user_lat: state.user.lat,
        user_lng: state.user.lng
      })
    });
    
    if (!parseResponse.ok) {
      throw new Error("Parse failed");
    }
    
    const parseResult = await parseResponse.json();
    console.log('üìù Parse result:', parseResult);

    // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º compose —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ–¥–æ–≤—ã–π –ø—É—Ç—å)
    const composeBody = {
      parse_result: parseResult,
      area: area,
      user_lat: state.user.lat,
      user_lng: state.user.lng,
      session_id: null,
      mode: state.searchMode === 'surprise' ? 'surprise' : 'vibe',
      query: q
    };
    const composeResponse = await fetch(`${API_BASE}/compose`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(composeBody)
    });

    if (!composeResponse.ok) {
      throw new Error("Compose failed");
    }

    const composeResult = await composeResponse.json();
    console.log('üéØ Compose result:', composeResult);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rails –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const allPlaces = [];
    (composeResult.rails || []).forEach(rail => {
      console.log(`üì¶ Rail ${rail.step}: ${rail.items.length} items`);
      rail.items.forEach(place => {
        allPlaces.push({
          ...place,
          step: rail.step,
          stepLabel: rail.label
        });
      });
    });
    
    console.log('üèÜ Total places found:', allPlaces.length);
    return allPlaces.slice(0, limit);
    
  } catch (error) {
    console.error('Netflix-style search failed:', error);
    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É API
    return searchPlacesByQuery(q, limit, area);
  }
}

async function searchPlacesByQuery(q, limit=12, area=null){
  const p = new URLSearchParams({ 
    q: q, 
    limit: String(limit) 
  });
  
  // –í —Ä–µ–∂–∏–º–µ Area –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
  if(state.user.lat && state.user.lng && !area) {
    p.set('lat', state.user.lat);
    p.set('lng', state.user.lng);
  }
  
  if(area) {
    p.set('area', area);
  }
  
  const res = await fetch(`${API_BASE}/places/search?${p.toString()}`);
  if(!res.ok) throw new Error("search failed");
  const data = await res.json();
  
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
  const results = data.results || [];
  const seen = new Set();
  const uniqueResults = [];
  
  for(const place of results) {
    const key = place.id ? `id_${place.id}` : `name_${place.name.toLowerCase().trim()}`;
    if(!seen.has(key)) {
      seen.add(key);
      uniqueResults.push(place);
    }
  }
  
  return uniqueResults;
}
async function buildRouteApi(stepIds){
  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äì –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å —Å–æ —Å–≤–æ–∏–º /api/routes –ø–æ–∑–∂–µ
  return { route: { steps: [] }, ok:true };
}

/* ---------- Search Reset ---------- */
function resetSearch() {
  console.log('Resetting search results...');
  state.steps = [];
  state.anchor = null;
  renderRails(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  renderSelectedBar();
}

/* ---------- Mode Management ---------- */
function initModeControls() {
  const highExpBtn = $("#highExpBtn");
  const surpriseBtn = $("#surpriseBtn");
  const driftBtn = $("#driftBtn");

  // High Experience —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
  highExpBtn.onclick = () => {
    state.highExperienceFilter = !state.highExperienceFilter;
    
    if (state.highExperienceFilter) {
    highExpBtn.classList.add('control-btn--active');
    } else {
      highExpBtn.classList.remove('control-btn--active');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    applyHighExperienceFilter();
    renderRails();
  };

  vibeBtn.onclick = () => {
    // Vibe button –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç drawer –¥–ª—è –≤—ã–±–æ—Ä–∞ vibe –∏ energy
    showVibeDrawer();
  };

  // –ö–Ω–æ–ø–∫–∞ Drift - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
  if (driftBtn) {
    driftBtn.onclick = () => {
      if (state.selectedPlaces.length === 0) {
        alert('Please select at least one place by clicking + button');
        return;
      }

      console.log(`üó∫Ô∏è Drift: Building route for ${state.selectedPlaces.length} selected places`);

      const mapsUrl = buildGoogleMapsRouteUrl();
      if (!mapsUrl) {
        alert('Selected places need valid coordinates to open Google Maps route.');
        return;
      }

      const popup = window.open(mapsUrl, '_blank', 'noopener');
      if (!popup || popup.closed) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Google Maps –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ.');
        alert('Allow pop-ups for this site to open the route in Google Maps.');
        return;
      }
      popup.focus();
    };
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vibe drawer
  initVibeDrawer();
}

/* ---------- High Experience Filter ---------- */
function isHighExperiencePlace(place) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ hq_experience –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const signals = place.signals || {};
  if (signals.hq_experience !== undefined) {
    return Boolean(signals.hq_experience);
  }
  
  // –ò–Ω–∞—á–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ _compute_hq_flag
  const qualityScore = parseFloat(signals.quality_score || 0);
  if (qualityScore >= 0.6) return true; // –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å 0.65 –¥–æ 0.6
  
  if (signals.editor_pick) return true;
  
  if (signals.local_gem && (signals.dateworthy || signals.vista_view)) return true;
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è High Experience
  const qualityTriggers = {
    michelin: ["michelin", "bib gourmand", "one star", "1 star", "starred"],
    specialty_coffee: ["specialty coffee", "manual brew", "pour-over", "roastery", "flagship roaster"],
    chef_table: ["omakase", "chef's table", "tasting menu"],
    curated_gallery: ["curated program", "gallery program"],
    
    // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    premium_cocktails: ["craft cocktails", "mixology", "signature cocktails", "artisan cocktails", "award-winning bar", "premium spirits", "craft bar", "cocktail lounge"],
    luxury_spa: ["luxury spa", "premium treatments", "award-winning spa", "signature treatments", "world-class spa", "spa resort", "wellness retreat"],
    premium_rooftop: ["panoramic view", "skyline view", "infinity pool", "rooftop infinity", "stunning views", "breathtaking view", "city views", "rooftop terrace"],
    fine_dining: ["fine dining", "chef's selection", "molecular gastronomy", "farm-to-table", "tasting menu", "degustation"],
    luxury_experience: ["luxury", "premium", "exclusive", "boutique", "world-class", "award-winning", "5-star", "upscale"]
  };
  
  const texts = [
    place.name || '',
    place.summary || '',
    place.tags_csv || ''
  ];
  
  if (signals.hooks) texts.push(...signals.hooks);
  if (signals.evidence) texts.push(...signals.evidence);
  
  const searchableText = texts.join(' ').toLowerCase();
  
  for (const [category, needles] of Object.entries(qualityTriggers)) {
    for (const needle of needles) {
      if (searchableText.includes(needle.toLowerCase())) {
        return true;
      }
    }
  }
  
  return false;
}

function applyHighExperienceFilter() {
  if (!state.steps.length) return;
  
  let totalPlaces = 0;
  let hqPlaces = 0;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º step —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  state.steps.forEach(step => {
    if (step.results && step.results.length > 0) {
      totalPlaces += step.results.length;
      
      if (state.highExperienceFilter) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ high experience –º–µ—Å—Ç–∞
        step.filteredResults = step.results.filter(place => {
          const isHQ = isHighExperiencePlace(place);
          if (isHQ) hqPlaces++;
          return isHQ;
        });
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        step.filteredResults = step.results;
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º HQ –º–µ—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        step.results.forEach(place => {
          if (isHighExperiencePlace(place)) hqPlaces++;
        });
      }
    }
  });
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(`üèÜ High Experience Filter Stats:`);
  console.log(`Total places: ${totalPlaces}`);
  console.log(`High Experience places: ${hqPlaces}`);
  console.log(`HQ percentage: ${totalPlaces > 0 ? (hqPlaces/totalPlaces*100).toFixed(1) : 0}%`);
  console.log(`Filter active: ${state.highExperienceFilter}`);
  
  // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º renderRails() –∑–¥–µ—Å—å - –ø—É—Å—Ç—å –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ –¥–µ–ª–∞–µ—Ç
}

/* ---------- Parse query into ordered steps ---------- */
async function parseSteps(input){
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    const parseResponse = await fetch(`${API_BASE}/parse`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: input,
        area: state.selectedArea,
        user_lat: state.user.lat,
        user_lng: state.user.lng
      })
    });
    
    if (!parseResponse.ok) {
      throw new Error("Parse failed");
    }
    
    const parseResult = await parseResponse.json();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç steps
    return parseResult.steps.map(step => ({
      label: getStepLabel(step.intent),
      query: step.query,
      results: undefined,
      selected: null,
      intent: step.intent
    }));
    
  } catch (error) {
    console.error('Parse failed, falling back to simple split:', error);
    // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞–∑–±–∏–µ–Ω–∏—é –ø–æ –∑–∞–ø—è—Ç—ã–º
    return input.split(",")
      .map(s=>s.trim())
      .filter(Boolean)
      .map((q,i)=>({ label:q, query:q, results:undefined, selected:null }));
  }
}

function getStepLabel(intent) {
  const labels = {
    'restaurant': 'Restaurants',
    'drinks': 'Bars & Nightlife', 
    'activity': 'Activities',
    'wellness': 'Wellness & Spa',
    'culture': 'Culture & Arts',
    'shopping': 'Shopping',
    'general': 'Places'
  };
  return labels[intent] || intent.charAt(0).toUpperCase() + intent.slice(1);
}

/* ---------- Render ---------- */
function renderSelectedBar(){
  const wrap = $("#selectedChips");
  const selectedBar = $("#selectedBar");
  wrap.innerHTML = "";
  
  const hasSelections = state.steps.some(st => st.selected);
  
  if (hasSelections) {
    selectedBar.style.display = "flex";
    state.steps.forEach((st,idx)=>{
      if (st.selected) {
        const chip = document.createElement("button");
        chip.className="chip";
        chip.textContent = `${idx+1}. ${st.selected.name}`;
        chip.title = "Unselect";
        chip.onclick = ()=>{
          st.selected = null;
          if (state.anchor && state.anchor.stepIndex === idx) state.anchor = null;
          updateAllDistances();
          renderSelectedBar();
        };
        wrap.appendChild(chip);
      }
    });
  } else {
    selectedBar.style.display = "none";
  }
}

function renderRails(){
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–æ–π
  saveScrollPositions();
  
  const container = $("#rails");
  container.innerHTML = "";
  
  // –î–æ–±–∞–≤–ª—è–µ–º vibe caption –µ—Å–ª–∏ –µ—Å—Ç—å
  if (state.vibeCaption) {
    const caption = document.createElement('div');
    caption.className = 'vibe-caption';
    caption.innerHTML = `
      <div class="vibe-caption__content">
        <span class="vibe-caption__text">${state.vibeCaption}</span>
        ${state.vibeEmptyState ? '<a href="#" class="vibe-caption__link" onclick="showVibeDrawer(); return false;">Try different vibe</a>' : ''}
      </div>
    `;
    container.appendChild(caption);
  }
  
  console.log(`Rendering rails, steps count:`, state.steps.length);
  
  // –ü–æ–∫–∞–∑–∞—Ç—å empty state –µ—Å–ª–∏ –Ω–µ—Ç —à–∞–≥–æ–≤
  if (!state.steps.length) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state__icon">üéØ</div>
        <h2 class="empty-state__title">Plan your evening</h2>
        <p class="empty-state__description">Enter your plans above to discover amazing places</p>
      </div>
    `;
    return;
  }
  
  const railTpl = $("#railTpl");
  const cardTpl = $("#cardTpl");

  state.steps.forEach((st,stepIndex)=>{
    const displayResults = st.filteredResults || st.results;
    console.log(`Rendering step ${stepIndex}:`, st.label, `results: ${st.results?.length || 0}`, `filtered: ${displayResults?.length || 0}`);
    
    const railNode = railTpl.content.cloneNode(true);
    railNode.querySelector(".rail__title").textContent = st.label;
    railNode.querySelector(".rail__hint").textContent = "Swipe ‚Üí";

    const content = railNode.querySelector(".rail__content");
    if (st.results === undefined) {
      console.log(`Step ${stepIndex} is loading, showing loading`);
      const empty = document.createElement("div");
      empty.style.cssText="padding:20px;color:#6c757d;text-align:center;width:100%;";
      empty.innerHTML = `
        <div class="loading-placeholder">
          <div class="loading-spinner"></div>
          <p>Searching for ${st.label.toLowerCase()}...</p>
        </div>
      `;
      content.appendChild(empty);
    } else if (Array.isArray(displayResults) && displayResults.length === 0) {
      console.log(`Step ${stepIndex} has empty results, showing no places`);
      const empty = document.createElement("div");
      empty.style.cssText="padding:20px;color:#6c757d;text-align:center;width:100%;";
      empty.innerHTML = `
        <div class="empty-rail">
          <div class="empty-rail__icon">üîç</div>
          <p>No ${st.label.toLowerCase()} found</p>
          <small>Try adjusting your search or location</small>
        </div>
      `;
      content.appendChild(empty);
    } else {
      console.log(`Step ${stepIndex} rendering ${displayResults.length} places`);
      // –ú–µ—Å—Ç–∞ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ recomputeDistancesAndSort()
      displayResults.forEach(place=>{
        const n = cardTpl.content.cloneNode(true);
        const img = n.querySelector(".place-card__img");
        const title = n.querySelector(".place-card__title");
        const badges = n.querySelector(".place-card__badges");
        const summary = n.querySelector(".place-card__summary");
        const why = n.querySelector(".place-card__why");
        const tags = n.querySelector(".place-card__tags");
        const maps = n.querySelector(".place-card__maps");
        const addBtn = n.querySelector(".place-card__add-btn");
        const distEl = n.querySelector("[data-dist]");
        const ratingEl = n.querySelector("[data-rating]");
        const ratingValue = n.querySelector(".rating-value");

        img.src = place.picture_url || "https://picsum.photos/400/300";
        img.alt = place.name || "place";
        title.textContent = place.name;
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ badges
        badges.innerHTML = "";
        if (place.badges && place.badges.length > 0) {
          place.badges.slice(0, 2).forEach(badge => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 badge
            const badgeEl = document.createElement("span");
            badgeEl.className = "badge";
            badgeEl.textContent = badge;
            badges.appendChild(badgeEl);
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ summary
        const fullSummary = place.summary || "";
        const firstSentence = fullSummary.split('.')[0] + (fullSummary.includes('.') ? '.' : '');
        summary.textContent = firstSentence;
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ why (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)
        why.innerHTML = "";
        if (place.why) {
          const whyEl = document.createElement("div");
          whyEl.className = "why-text";
          whyEl.textContent = `üí° ${place.why}`;
          why.appendChild(whyEl);
        }
        
        // Generate Google Maps URL: use name search for best mobile compatibility
        let mapsUrl = "#";
        if (place.name) {
          // Search by name - most reliable across all devices
          const searchQuery = encodeURIComponent(place.name + ' Bangkok');
          mapsUrl = `https://www.google.com/maps/search/?api=1&query=${searchQuery}`;
        } else if (place.gmaps_place_id) {
          // Fallback to Place ID
          mapsUrl = `https://www.google.com/maps/place/?q=place_id:${place.gmaps_place_id}`;
        } else if (place.lat && place.lng) {
          // Last resort - coordinates
          mapsUrl = `https://www.google.com/maps/search/?api=1&query=${place.lat},${place.lng}`;
        }
        maps.href = mapsUrl;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        ratingEl.style.display = "flex";
        console.log('Rating raw', place.name, place.rating, typeof place.rating);
        let ratingText = place.rating;
        if (ratingText === undefined || ratingText === null || ratingText === "") {
          ratingText = "‚Äî";
        } else {
          let normalized = ratingText;
          if (typeof normalized === "string") {
            normalized = normalized.replace(',', '.').trim();
          }
          const parsed = parseFloat(normalized);
          if (!Number.isNaN(parsed) && Number.isFinite(parsed)) {
            ratingText = parsed.toFixed(1);
          } else {
            ratingText = String(ratingText);
          }
        }
        ratingValue.textContent = ratingText;
        const star = ratingEl.querySelector(".rating-star");
        if (star) {
          star.textContent = "‚≠ê";
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏
        tags.innerHTML = "";
        (place.tags_csv || "").split(",").slice(0,3).map(s=>s.trim()).filter(Boolean)
          .forEach(t=>{ 
            const tag = document.createElement("span"); 
            tag.className = "tag";
            tag.textContent = t; 
            tags.appendChild(tag); 
          });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        console.log(`Rendering place: ${place.name}`);
        console.log(`Place coordinates:`, { lat: place.lat, lng: place.lng });
        console.log(`Step distance label:`, st.distanceLabel);
        
        // –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å ‚Äî
        if (!place.lat || !place.lng) {
          distEl.textContent = "‚Äî";
          return;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–∫–æ—Ä—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if (state.anchor && state.anchor.stepIndex === stepIndex) {
          distEl.textContent = "";
          // –ù–µ return, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ place.distance
        if (place.distance !== undefined && st.distanceLabel) {
          const finalText = `${formatDistance(place.distance)} ${st.distanceLabel}`;
          console.log(`Final distance text:`, finalText);
          distEl.textContent = finalText;
        } else {
          // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ "‚Äî"
          distEl.textContent = "üìç Location needed";
        }

        // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const isSelected = state.selectedPlaces.some(p => p.id === place.id);
        addBtn.setAttribute("aria-pressed", isSelected ? "true":"false");
        addBtn.onclick = async ()=>{
          if(isSelected){
            // –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            state.selectedPlaces = state.selectedPlaces.filter(p => p.id !== place.id);
            console.log(`üó∫Ô∏è Removed from route: ${place.name}`);
            
            // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            st.selected = null;
            console.log(`Deselected: ${place.name} in step ${stepIndex}`);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —è–∫–æ—Ä—å - –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π —è–∫–æ—Ä—å –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
            if (state.anchor && state.anchor.id === place.id) {
              console.log(`Clearing anchor: ${place.name}`);
              let newAnchor = null;
              for (let i = state.steps.length - 1; i >= 0; i--) {
                if (state.steps[i].selected) {
                  newAnchor = {
                    id: state.steps[i].selected.id,
                    lat: state.steps[i].selected.lat,
                    lng: state.steps[i].selected.lng,
                    name: state.steps[i].selected.name,
                    stepIndex: i
                  };
                  break;
                }
              }
              state.anchor = newAnchor;
              console.log(`New anchor:`, state.anchor);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç
            if (state.selectedPlaces.length === 0) {
              hideMapContainer();
            } else if (state.googleMap) {
              updateMapWithSelectedPlaces();
            }
            
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            state.selectedPlaces.push(place);
            console.log(`üó∫Ô∏è Added to route: ${place.name}`);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            st.selected = place;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            state.anchor = {
              id: place.id,
              lat: place.lat,
              lng: place.lng,
              name: place.name,
              stepIndex: stepIndex
            };
            console.log(`Selected: ${place.name} in step ${stepIndex}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
            if (state.selectedPlaces.length === 1) {
              try {
                console.log('üó∫Ô∏è Loading Google Maps for first selected place...');
                await loadGoogleMapsAPI();
                showMapContainer();
              } catch (error) {
                console.error('Failed to initialize Google Maps:', error);
              }
            } else if (state.googleMap) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
              updateMapWithSelectedPlaces();
            }
          }
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—è–¥—ã –ë–ï–ó –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
          recomputeDistancesAndSortExceptCurrent(stepIndex);
          renderSelectedBar();
          renderRails();
        };

        content.appendChild(n);
      });
    }
    container.appendChild(railNode);
  });
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  setTimeout(() => {
    restoreScrollPositions();
  }, 0);
}

function distanceFromAnchor(place){
  if(!state.anchor || place?.lat==null || place?.lng==null) return null;
  return haversineM(
    {lat:state.anchor.lat,lng:state.anchor.lng},
    {lat:place.lat,lng:place.lng}
  );
}

function distanceFromUser(place){
  if(!state.user.lat || !state.user.lng || place?.lat==null || place?.lng==null) return null;
  return haversineM(
    {lat:state.user.lat,lng:state.user.lng},
    {lat:place.lat,lng:place.lng}
  );
}
function updateAllDistances(){
  // —Ç–æ—á–Ω–µ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º rails (–¥–µ—à–µ–≤–æ –ø—Ä–∏ 10‚Äì20 –∫–∞—Ä—Ç–æ—á–∫–∞—Ö/—Ä–µ–ª—å—Å)
  renderRails();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function recomputeDistancesAndSort(){
  console.log(`Recomputing distances and sorting...`);
  console.log(`Current anchor:`, state.anchor);
  console.log(`Steps count:`, state.steps.length);
  
  state.steps.forEach((step, stepIndex) => {
    console.log(`Processing step ${stepIndex}:`, step.label, `results: ${step.results?.length || 0}`);
    
    if (!step.results || step.results.length === 0) {
      console.log(`Step ${stepIndex} has no results, skipping`);
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–∫–æ—Ä—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (state.anchor && state.anchor.stepIndex === stepIndex) {
      step.distanceLabel = '';
      console.log(`Step ${stepIndex} is anchor category - no distance, but processing results`);
      // –ù–µ return, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —è–∫–æ—Ä—è - –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    if (state.anchor && state.anchor.stepIndex === stepIndex) {
      console.log(`Step ${stepIndex} is anchor category - keeping original order`);
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      step.results.forEach(place => {
        place.distance = undefined;
      });
    } else {
      const referencePoint = getReferencePointForCategory(stepIndex);
      
      if (referencePoint) {
        // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        step.results.forEach(place => {
          place.distance = haversineM(referencePoint, { lat: place.lat, lng: place.lng });
        });
        
        // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        step.results.sort((a, b) => (a.distance || 0) - (b.distance || 0));
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if (state.anchor) {
          step.distanceLabel = `from ${state.anchor.name}`;
        } else {
          step.distanceLabel = 'from you';
        }
        
        console.log(`Step ${stepIndex} sorted by distance, label: ${step.distanceLabel}`);
      } else {
        // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Ç–æ—á–∫–∏ - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        step.results.sort((a, b) => (b.rank || 0) - (a.rank || 0));
        step.distanceLabel = '';
        console.log(`Step ${stepIndex} sorted by relevance, no distance label`);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Ä—è–¥–æ–≤ –ë–ï–ó –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
function recomputeDistancesAndSortExceptCurrent(currentStepIndex){
  console.log(`Recomputing distances and sorting except rows with selected places`);
  console.log(`Current anchor:`, state.anchor);
  console.log(`Steps count:`, state.steps.length);
  
  state.steps.forEach((step, stepIndex) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—è–¥—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
    if (step.selected) {
      console.log(`Skipping step ${stepIndex} (has selected place):`, step.label);
      return;
    }
    
    console.log(`Processing step ${stepIndex}:`, step.label, `results: ${step.results?.length || 0}`);
    
    if (!step.results || step.results.length === 0) {
      console.log(`Step ${stepIndex} has no results, skipping`);
      return;
    }
    
    const referencePoint = getReferencePointForCategory(stepIndex);
    
    if (referencePoint) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      step.results.forEach(place => {
        place.distance = haversineM(referencePoint, { lat: place.lat, lng: place.lng });
      });
      
      // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
      step.results.sort((a, b) => (a.distance || 0) - (b.distance || 0));
      
      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      if (state.anchor) {
        step.distanceLabel = `from ${state.anchor.name}`;
      } else {
        step.distanceLabel = 'from you';
      }
      
      console.log(`Step ${stepIndex} sorted by distance, label: ${step.distanceLabel}`);
    } else {
      // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Ç–æ—á–∫–∏ - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      step.results.sort((a, b) => (b.rank || 0) - (a.rank || 0));
      step.distanceLabel = '';
      console.log(`Step ${stepIndex} sorted by relevance, no distance label`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ (legacy)
function resortAllCategories(){
  recomputeDistancesAndSort();
}

/* ---------- Actions ---------- */
let searchTimeout = null;

async function applyQuery(){
  const input = $("#queryInput").value.trim();
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!input) {
    searchTimeout = setTimeout(() => {
      resetSearch();
    }, 300);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∂–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  searchTimeout = setTimeout(async () => {
    await performSearch(input);
  }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∂–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
}

async function showSurpriseRails() {
  console.log(`üé≤ Showing surprise rails`);
  
  // –ü–æ–ª—É—á–∞–µ–º surprise rails
  const places = await getRailsForMode('surprise');
  
  if (places.length === 0) {
    state.steps = [];
    renderRails();
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä—è–¥–∞—Ö
  const railsMap = {};
  places.forEach(place => {
    const step = place.stepLabel || place.step || 'Surprise Me';
    if (!railsMap[step]) {
      railsMap[step] = {
        label: step,
        query: step,
        results: []
      };
    }
    railsMap[step].results.push(place);
  });
  
  state.steps = Object.values(railsMap);
  renderRails();
}

/* ---------- Vibe Drawer ---------- */
function showVibeDrawer() {
  console.log('üé≠ Opening vibe drawer');
  
  // Fire analytics event
  if (window.gtag) {
    window.gtag('event', 'ui.vibe_open', {
      event_category: 'ui',
      event_label: 'vibe_drawer'
    });
  }
  
  const drawer = document.getElementById('vibeDrawer');
  drawer.setAttribute('aria-hidden', 'false');
  drawer.style.display = 'block';
  
  // Focus trap
  const firstButton = drawer.querySelector('.vibe-option');
  if (firstButton) {
    firstButton.focus();
  }
  
  // Load saved selection
  loadVibeSelection();
}

function hideVibeDrawer() {
  console.log('üé≠ Closing vibe drawer');
  
  const drawer = document.getElementById('vibeDrawer');
  drawer.setAttribute('aria-hidden', 'true');
  drawer.style.display = 'none';
  
  // Fire analytics event
  if (window.gtag) {
    window.gtag('event', 'ui.vibe_cancel', {
      event_category: 'ui',
      event_label: 'vibe_drawer'
    });
  }
}

function initVibeDrawer() {
  const drawer = document.getElementById('vibeDrawer');
  const closeBtn = document.getElementById('closeVibe');
  const cancelBtn = document.getElementById('cancelVibe');
  const applyBtn = document.getElementById('applyVibe');
  const vibeOptions = document.querySelectorAll('.vibe-option');
  const energyOptions = document.querySelectorAll('.energy-option');
  
  // Close buttons
  closeBtn.onclick = hideVibeDrawer;
  cancelBtn.onclick = hideVibeDrawer;
  
  // ESC key to close
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && drawer.getAttribute('aria-hidden') === 'false') {
      hideVibeDrawer();
    }
  });
  
  // Vibe selection
  vibeOptions.forEach(btn => {
    btn.onclick = () => {
      // Remove previous selection
      vibeOptions.forEach(b => b.classList.remove('vibe-option--selected'));
      // Select current
      btn.classList.add('vibe-option--selected');
      state.selectedVibe = btn.dataset.vibe;
      updateApplyButton();
    };
  });
  
  // Energy selection
  energyOptions.forEach(btn => {
    btn.onclick = () => {
      // Remove previous selection
      energyOptions.forEach(b => b.classList.remove('energy-option--selected'));
      // Select current
      btn.classList.add('energy-option--selected');
      state.selectedEnergy = btn.dataset.energy;
      updateApplyButton();
    };
  });
  
  // Apply button
  applyBtn.onclick = () => {
    if (state.selectedVibe && state.selectedEnergy) {
      applyVibeSelection();
    }
  };
}

function updateApplyButton() {
  const applyBtn = document.getElementById('applyVibe');
  const canApply = state.selectedVibe && state.selectedEnergy;
  
  applyBtn.disabled = !canApply;
  if (canApply) {
    applyBtn.textContent = `Apply (${state.selectedVibe}, ${state.selectedEnergy})`;
  } else {
    applyBtn.textContent = 'Apply';
  }
}

function loadVibeSelection() {
  // Load from localStorage
  const saved = localStorage.getItem('vibeSelection');
  if (saved) {
    try {
      const { vibe, energy } = JSON.parse(saved);
      if (vibe) {
        const vibeBtn = document.querySelector(`[data-vibe="${vibe}"]`);
        if (vibeBtn) {
          vibeBtn.classList.add('vibe-option--selected');
          state.selectedVibe = vibe;
        }
      }
      if (energy) {
        const energyBtn = document.querySelector(`[data-energy="${energy}"]`);
        if (energyBtn) {
          energyBtn.classList.add('energy-option--selected');
          state.selectedEnergy = energy;
        }
      }
      updateApplyButton();
    } catch (e) {
      console.warn('Failed to load vibe selection:', e);
    }
  }
}

function saveVibeSelection() {
  const selection = {
    vibe: state.selectedVibe,
    energy: state.selectedEnergy,
    timestamp: Date.now()
  };
  localStorage.setItem('vibeSelection', JSON.stringify(selection));
}

async function applyVibeSelection() {
  console.log(`üé≠ Applying vibe: ${state.selectedVibe}, energy: ${state.selectedEnergy}`);
  
  // Fire analytics event
  if (window.gtag) {
    window.gtag('event', 'ui.vibe_apply', {
      event_category: 'ui',
      event_label: 'vibe_drawer',
      custom_parameters: {
        vibe: state.selectedVibe,
        energy: state.selectedEnergy
      }
    });
  }
  
  // Save selection
  saveVibeSelection();
  
  // Hide drawer
  hideVibeDrawer();
  
  // Get vibe rails
  const places = await getVibeRails(state.selectedVibe, state.selectedEnergy);
  
  if (places.length === 0) {
    showVibeEmptyState();
    return;
  }
  
  // Group places into rails
  const railsMap = {};
  places.forEach(place => {
    const step = place.stepLabel || place.step || 'Vibe';
    if (!railsMap[step]) {
      railsMap[step] = {
        label: step,
        query: step,
        results: []
      };
    }
    railsMap[step].results.push(place);
  });
  
  state.steps = Object.values(railsMap);
  
  // Add vibe caption
  state.vibeCaption = `Vibe: ${state.selectedVibe}, Energy: ${state.selectedEnergy}`;
  
  renderRails();
}

function showVibeEmptyState() {
  state.steps = [{
    label: 'No matches found',
    query: 'vibe',
    results: []
  }];
  
  state.vibeCaption = `Vibe: ${state.selectedVibe}, Energy: ${state.selectedEnergy}`;
  state.vibeEmptyState = true;
  
  renderRails();
}

async function getVibeRails(vibe, energy) {
  try {
    const params = new URLSearchParams({
      mode: 'vibe',
      vibe: vibe,
      energy: energy,
      user_lat: state.user.lat,
      user_lng: state.user.lng
    });
    
    const response = await fetch(`/api/rails?${params.toString()}`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return data.rails || [];
  } catch (error) {
    console.error('Failed to get vibe rails:', error);
    return [];
  }
}

async function showModeRails() {
  console.log(`üéØ Showing ${state.searchMode} rails`);
  
  // –ü–æ–ª—É—á–∞–µ–º rails –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  const places = await getRailsForMode(state.searchMode);
  
  if (places.length === 0) {
    state.steps = [];
    renderRails();
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ stepLabel (rail label)
  const railsMap = {};
  places.forEach(place => {
    const railLabel = place.stepLabel || 'Suggested';
    if (!railsMap[railLabel]) {
      railsMap[railLabel] = {
        label: railLabel,
        query: '',
        results: [],
        selected: null
      };
    }
    railsMap[railLabel].results.push(place);
  });
  
  state.steps = Object.values(railsMap);
  renderRails();
}

/* ---------- Get Rails without query ---------- */
async function getRailsForMode(mode, limit = 36) {
  try {
    const params = new URLSearchParams({
      mode: mode,
      limit: limit.toString()
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (state.user.lat && state.user.lng) {
      params.append('user_lat', state.user.lat.toString());
      params.append('user_lng', state.user.lng.toString());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º quality=high –¥–ª—è high_experience —Ä–µ–∂–∏–º–∞
    if (mode === 'high_experience') {
      params.append('quality', 'high');
      params.set('mode', 'vibe'); // –∏—Å–ø–æ–ª—å–∑—É–µ–º vibe mode –¥–ª—è quality filter
    }

    const response = await fetch(`${API_BASE}/rails?${params}`);
    if (!response.ok) {
      throw new Error("Rails request failed");
    }

    const result = await response.json();
    console.log(`üéØ ${mode} rails result:`, result);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rails –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const allPlaces = [];
    (result.rails || []).forEach(rail => {
      console.log(`üì¶ Rail ${rail.step}: ${rail.items.length} items`);
      rail.items.forEach(place => {
        allPlaces.push({
          ...place,
          step: rail.step,
          stepLabel: rail.label
        });
      });
    });
    
    console.log(`üèÜ Total ${mode} places:`, allPlaces.length);
    return allPlaces.slice(0, limit);
    
  } catch (error) {
    console.error(`${mode} rails failed:`, error);
    return [];
  }
}

async function fetchComposeRails(q, lat, lng, limit = 12) {
  const params = new URLSearchParams({ q, limit: String(limit) });
  if (typeof lat === 'number' && typeof lng === 'number') {
    params.set('user_lat', String(lat));
    params.set('user_lng', String(lng));
  }
  const res = await fetch(`/api/rails?${params.toString()}`);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const data = await res.json();
  return data.rails || [];
}

function railsToSteps(rails){
  return (rails || []).map(r => ({
    label: r.label || 'Suggested',
    query: 'compose',
    results: (r.items || []).map(it => ({
      ...it,
      summary: it.summary || '',
      tags_csv: it.tags_csv || '',
      category: it.category || '',
      picture_url: it.picture_url || '',
      distance: it.distance_m ?? it.distance ?? null
    }))
  }));
}

async function showComposeRails(q){
  const lat = (typeof state.user?.lat === 'number') ? state.user.lat : null;
  const lng = (typeof state.user?.lng === 'number') ? state.user.lng : null;
  const rails = await fetchComposeRails(q, lat, lng, 12);
  state.steps = railsToSteps(rails);
  renderRails();
}

async function performSearch(input) {
  console.log('üîç Starting search for:', input);
  
  // –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã/–∑–Ω–∞–∫–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º compose slotter
  if (/\s|,/.test(input)) {
    try {
      await showComposeRails(input);
      return;
    } catch (e) {
      console.warn('Compose slotter failed, fallback to legacy steps:', e);
      // –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∏–∂–µ
    }
  }
  
  state.steps = await parseSteps(input);
  console.log('üìù Parsed steps:', state.steps);
  renderSelectedBar();
  renderRails();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ (results –æ—Å—Ç–∞–µ—Ç—Å—è undefined)
  renderRails();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  const promises = state.steps.map(async (step, index) => {
    console.log(`üîé Searching step ${index}:`, step.query);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (100ms * –∏–Ω–¥–µ–∫—Å)
    await new Promise(resolve => setTimeout(resolve, index * 100));
    try{
      const items = await searchPlaces(step.query, 12, state.selectedArea);
      console.log(`‚úÖ Step ${index} results:`, items.length, 'items');
      step.results = Array.isArray(items) ? items : [];
    }catch(e){ 
      console.error(`‚ùå Step ${index} error:`, e);
      step.results=[]; 
    }
  });

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  await Promise.all(promises);
  
  console.log('üéØ Final steps:', state.steps.map(s => ({ 
    query: s.query, 
    results: s.results?.length || 0 
  })));
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  resortAllCategories();
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
  applyHighExperienceFilter();
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Ä—è–¥—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  renderRails();
}

/* ---------- Drawer (Route) ---------- */
function openRoute(){ $("#routeDrawer").setAttribute("aria-hidden","false"); drawRouteList(); }
function closeRoute(){ $("#routeDrawer").setAttribute("aria-hidden","true"); }
function drawRouteList(){
  const ol = $("#routeList"); ol.innerHTML="";
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ state.selectedPlaces
  state.selectedPlaces.forEach((place, index) => {
    const li = document.createElement("li");
    li.className = "route-item";
    li.textContent = `${index + 1}. ${place.name}`;
    li.setAttribute("draggable", "true");
    li.dataset.index = String(index);

    li.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', li.dataset.index);
      li.classList.add('dragging');
    });
    li.addEventListener('dragend', () => {
      li.classList.remove('dragging');
    });
    li.addEventListener('dragover', (e) => {
      e.preventDefault();
      li.classList.add('dragover');
    });
    li.addEventListener('dragleave', () => {
      li.classList.remove('dragover');
    });
    li.addEventListener('drop', (e) => {
      e.preventDefault();
      li.classList.remove('dragover');
      const fromIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);
      const toIndex = parseInt(li.dataset.index || '0', 10);
      if (Number.isInteger(fromIndex) && Number.isInteger(toIndex) && fromIndex !== toIndex) {
        reorderSelectedPlaces(fromIndex, toIndex);
        drawRouteList();
        // –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
        if (state.googleMap && state.directionsService) {
          buildAndRenderRouteFromHome();
        }
      }
    });

    ol.appendChild(li);
  });
}
async function buildRoute(){
  // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Directions
  if (state.selectedPlaces.length === 0) {
    $("#routeResult").textContent = "Pick at least one place.";
    return;
  }
  $("#routeResult").textContent = "Building route...";
  if (!state.googleMapsLoaded) {
    await loadGoogleMapsAPI();
  }
  showMapContainer();
  ensureDirections();
  buildAndRenderRouteFromHome();
  $("#routeResult").textContent = "Route built.";
}

// –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
function reorderSelectedPlaces(fromIndex, toIndex) {
  const arr = state.selectedPlaces.slice();
  const [moved] = arr.splice(fromIndex, 1);
  arr.splice(toIndex, 0, moved);
  state.selectedPlaces = arr;
}

/* ---------- Google Maps Functions ---------- */

// –ó–∞–≥—Ä—É–∑–∫–∞ Google Maps API
async function loadGoogleMapsAPI() {
  if (state.googleMapsLoaded) return true;
  
  try {
    const response = await fetch(`${API_BASE}/config`);
    const config = await response.json();
    const apiKey = config.google_maps_api_key;
    
    if (!apiKey) {
      console.error('Google Maps API key not available');
      return false;
    }
    
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initGoogleMap`;
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        state.googleMapsLoaded = true;
        console.log('‚úÖ Google Maps API loaded');
        resolve(true);
      };
      
      script.onerror = (error) => {
        console.error('‚ùå Failed to load Google Maps API:', error);
        showMapError();
        resolve(false);
      };
      
      document.head.appendChild(script);
    });
  } catch (error) {
    console.error('Failed to load Google Maps config:', error);
    return false;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è callback)
window.initGoogleMap = function() {
  const mapContainer = document.getElementById('map');
  if (!mapContainer) {
    console.error('Map container not found');
    return;
  }
  
  try {
    state.googleMap = new google.maps.Map(mapContainer, {
      zoom: 13,
      center: { lat: 13.7563, lng: 100.5018 }, // –ë–∞–Ω–≥–∫–æ–∫
      mapTypeControl: false,
      streetViewControl: false,
      fullscreenControl: false
    });
    
    console.log('‚úÖ Google Map initialized');
    updateMapWithSelectedPlaces();
    ensureDirections();
    
  } catch (error) {
    console.error('Failed to initialize Google Map:', error);
    showMapError();
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É
function showMapContainer() {
  const mapContainer = document.getElementById('mapContainer');
  if (mapContainer) {
    mapContainer.style.display = 'block';
    console.log('üìç Map container shown');
  }
}

// –°–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
function hideMapContainer() {
  const mapContainer = document.getElementById('mapContainer');
  if (mapContainer) {
    mapContainer.style.display = 'none';
    console.log('üìç Map container hidden');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∫–∞—Ä—Ç—ã
function showMapError() {
  const mapContainer = document.getElementById('map');
  if (mapContainer) {
    mapContainer.innerHTML = '<div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #e74c3c; text-align: center; padding: 20px;">Map unavailable<br><small>Check API key configuration</small></div>';
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
function updateMapWithSelectedPlaces() {
  if (!state.googleMap) return;
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  state.mapMarkers.forEach(marker => marker.setMap(null));
  state.mapMarkers = [];
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç - –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É
  if (state.selectedPlaces.length === 0) {
    console.log('üìç All markers cleared from map');
    return;
  }
  
  const bounds = new google.maps.LatLngBounds();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
  state.selectedPlaces.forEach((place, index) => {
    if (place.lat && place.lng) {
      const marker = new google.maps.Marker({
        position: { lat: parseFloat(place.lat), lng: parseFloat(place.lng) },
        map: state.googleMap,
        title: place.name,
        label: String(index + 1),
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 16,
          fillColor: '#4285f4',
          fillOpacity: 1,
          strokeColor: 'white',
          strokeWeight: 2,
          labelOrigin: new google.maps.Point(0, 0)
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º info window
      const infoWindow = new google.maps.InfoWindow({
        content: `<div style="font-weight: bold; margin-bottom: 4px;">${place.name}</div>
                  <div style="font-size: 12px; color: #666;">${place.summary || 'Selected place'}</div>`
      });
      
      marker.addListener('click', () => {
        infoWindow.open(state.googleMap, marker);
      });
      
      state.mapMarkers.push(marker);
      bounds.extend(marker.getPosition());
    }
  });
  
  // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
  if (state.selectedPlaces.length > 0) {
    state.googleMap.fitBounds(bounds);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π zoom –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    if (state.selectedPlaces.length === 1) {
      google.maps.event.addListenerOnce(state.googleMap, 'bounds_changed', () => {
        if (state.googleMap.getZoom() > 16) {
          state.googleMap.setZoom(16);
        }
      });
    }
  }
  
  console.log(`üìç Updated map with ${state.selectedPlaces.length} markers`);
}

// –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã Directions –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
function ensureDirections() {
  if (!state.googleMap || !window.google || !google.maps) return;
  if (!state.directionsService) {
    state.directionsService = new google.maps.DirectionsService();
  }
  if (!state.directionsRenderer) {
    state.directionsRenderer = new google.maps.DirectionsRenderer({
      map: state.googleMap,
      suppressMarkers: false,
      preserveViewport: false
    });
  } else if (state.directionsRenderer.getMap() !== state.googleMap) {
    state.directionsRenderer.setMap(state.googleMap);
  }
}

function buildGoogleMapsRouteUrl() {
  const sanitizeLatLng = (lat, lng) => {
    const latNum = Number(lat);
    const lngNum = Number(lng);
    if (!Number.isFinite(latNum) || !Number.isFinite(lngNum)) return null;
    return `${latNum},${lngNum}`;
  };

  const buildPlaceParam = place => {
    if (!place) return null;
    if (place.gmaps_place_id) {
      return `place_id:${place.gmaps_place_id}`;
    }
    const coords = sanitizeLatLng(place.lat, place.lng);
    if (coords) return coords;
    if (place.address) return place.address;
    if (place.name) return place.name;
    return null;
  };

  const placesWithParams = state.selectedPlaces
    .map(place => ({ place, param: buildPlaceParam(place) }))
    .filter(item => item.param);

  if (placesWithParams.length === 0) {
    console.warn('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ place_id –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ Google Maps.');
    return null;
  }

  const userOrigin = sanitizeLatLng(state.user?.lat, state.user?.lng);

  if (placesWithParams.length === 1) {
    const singleParam = placesWithParams[0].param;
    const params = new URLSearchParams();
    params.set('api', '1');
    params.set('travelmode', 'walking');
    params.set('destination', singleParam);
    if (userOrigin) {
      params.set('origin', userOrigin);
    }
    return `https://www.google.com/maps/dir/?${params.toString()}`;
  }

  const params = new URLSearchParams();
  params.set('api', '1');
  params.set('travelmode', 'walking');

  let originParam = userOrigin;
  let waypointCandidates = placesWithParams.slice(0, -1);
  const destinationParam = placesWithParams[placesWithParams.length - 1].param;

  if (!originParam) {
    originParam = placesWithParams[0].param;
    waypointCandidates = placesWithParams.slice(1, -1);
  }

  if (!originParam || !destinationParam) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å origin –∏–ª–∏ destination –¥–ª—è Google Maps.');
    return null;
  }

  const waypointParams = waypointCandidates.map(item => item.param).filter(Boolean);
  if (waypointParams.length > GOOGLE_MAPS_MAX_WAYPOINTS) {
    console.warn(`Waypoints —Å–æ–∫—Ä–∞—â–µ–Ω—ã —Å ${waypointParams.length} –¥–æ ${GOOGLE_MAPS_MAX_WAYPOINTS} –¥–ª—è —Å—Å—ã–ª–∫–∏ Google Maps.`);
  }

  params.set('origin', originParam);
  params.set('destination', destinationParam);
  if (waypointParams.length > 0) {
    params.set('waypoints', waypointParams.slice(0, GOOGLE_MAPS_MAX_WAYPOINTS).join('|'));
  }

  return `https://www.google.com/maps/dir/?${params.toString()}`;
}

// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç home (state.user) —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
function buildAndRenderRouteFromHome() {
  if (!state.googleMap || !state.directionsService || !state.directionsRenderer) return;
  if (!state.user.lat || !state.user.lng) {
    // –µ—Å–ª–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç, —É–∂–µ –∑–∞–¥–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.warn('No user location; using default home');
  }
  const origin = { lat: parseFloat(state.user.lat), lng: parseFloat(state.user.lng) };
  const points = state.selectedPlaces.filter(p => p.lat && p.lng);
  if (points.length === 0) return;
  const destination = { lat: parseFloat(points[points.length - 1].lat), lng: parseFloat(points[points.length - 1].lng) };
  const waypoints = points.slice(0, -1).map(p => ({ location: { lat: parseFloat(p.lat), lng: parseFloat(p.lng) }, stopover: true }));

  const request = {
    origin,
    destination,
    waypoints,
    travelMode: google.maps.TravelMode.WALKING,
    optimizeWaypoints: false
  };

  state.directionsService.route(request, (result, status) => {
    if (status === google.maps.DirectionsStatus.OK) {
      state.directionsRenderer.setDirections(result);
      renderRouteStats(result);
    } else {
      console.error('Directions request failed due to ' + status);
    }
  });
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Å—ã–ª–∫—É ¬´Open in Google Maps¬ª
function renderRouteStats(directionsResult) {
  const info = document.getElementById('mapInfo');
  const stats = document.getElementById('routeStats');
  if (!info || !stats) return;
  try {
    let totalMeters = 0;
    let totalSeconds = 0;
    const legs = directionsResult.routes?.[0]?.legs || [];
    legs.forEach(leg => {
      totalMeters += (leg.distance?.value || 0);
      totalSeconds += (leg.duration?.value || 0);
    });
    const km = (totalMeters / 1000).toFixed(1);
    const mins = Math.round(totalSeconds / 60);

    const mapsLink = buildGoogleMapsRouteUrl();

    stats.innerHTML = `
      <div><strong>Distance:</strong> ${km} km</div>
      <div><strong>ETA:</strong> ${mins} min</div>
      ${mapsLink ? `<div style="margin-top:8px;"><a href="${mapsLink}" target="_blank" rel="noopener">Open in Google Maps ‚Üó</a></div>` : '<div style="margin-top:8px;color:#b00;">Google Maps link unavailable</div>'}
    `;
    info.style.display = 'block';
  } catch (e) {
    console.warn('Failed to render stats', e);
  }
}

/* ---------- Init ---------- */
window.addEventListener("DOMContentLoaded", ()=>{
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã —Ä–µ–∂–∏–º–æ–≤
  initModeControls();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
  const closeMapBtn = document.getElementById('closeMap');
  if (closeMapBtn) {
    closeMapBtn.onclick = () => {
      hideMapContainer();
    };
  }
  
  // –ñ–∏–≤–æ–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
  $("#queryInput").addEventListener("input", applyQuery);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  renderRails();
  


    // Home Location button
    $("#homeLoc").onclick = ()=>{
      state.user.lat = 13.744262;
      state.user.lng = 100.561473;
      console.log("‚úÖ Home location set:", state.user.lat, state.user.lng);
      alert(`Home location set: ${state.user.lat}, ${state.user.lng}`);
      
      // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (state.steps.length > 0) {
        console.log("Re-sorting categories after home location");
        resortAllCategories();
        renderRails();
      }
    };

  // Auto-get location on page load
  (async () => {
    console.log("Attempting to get user location...");
    try {
      const pos = await new Promise((res,rej)=>navigator.geolocation.getCurrentPosition(res,rej,{enableHighAccuracy:true,timeout:5000}));
      state.user.lat = +pos.coords.latitude.toFixed(6);
      state.user.lng = +pos.coords.longitude.toFixed(6);
      console.log("‚úÖ Location obtained:", state.user.lat, state.user.lng);
      
      // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (state.steps.length > 0) {
        console.log("Re-sorting categories after location obtained");
        resortAllCategories();
        renderRails();
      }
    } catch (err) {
      console.log("‚ùå Location not available:", err.message);
      console.log("Error details:", err);
    }
  })();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const openRouteEl = $("#openRoute");
  const closeRouteEl = $("#closeRoute");
  const buildRouteEl = $("#buildRoute");
  
  if (openRouteEl) openRouteEl.onclick = openRoute;
  if (closeRouteEl) closeRouteEl.onclick = closeRoute;
  if (buildRouteEl) buildRouteEl.onclick = buildRoute;

  // –¥–µ–º–æ-–ø—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // $("#queryInput").value = "tom yum, rooftop, spa";
  // applyQuery();
});
