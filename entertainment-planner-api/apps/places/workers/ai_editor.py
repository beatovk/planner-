#!/usr/bin/env python3
"""
AI Editor Agent - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, –∏—â–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
"""

import os
import sys
import json
import logging
import requests
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
import time
import random

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from apps.core.db import SessionLocal
from apps.places.models import Place
from openai import OpenAI
from .web_verifier import WebVerifier
from sqlalchemy.orm import Session

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class AIEditorAgent:
    """
    AI Editor Agent - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç
    """
    
    def __init__(self, api_key: str = None, batch_size: int = 5):
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        self.batch_size = batch_size
        self.client = OpenAI(api_key=self.api_key)
        self.web_verifier = WebVerifier()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.processed_count = 0
        self.verified_count = 0
        self.updated_count = 0
        self.error_count = 0
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Editor Agent...")
        
        try:
            self._process_batches()
            
            logger.info("‚úÖ AI Editor Agent –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
            self._print_stats()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
    
    def _process_batches(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–∞–º–∏"""
        db = SessionLocal()
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (published –∏–ª–∏ new)
                places = db.query(Place).filter(
                    Place.processing_status.in_(['published', 'new'])
                ).filter(
                    Place.ai_verified.is_(None)  # –ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã AI-–∞–≥–µ–Ω—Ç–æ–º
                ).limit(self.batch_size).all()
                
                if not places:
                    logger.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI-–∞–≥–µ–Ω—Ç–æ–º")
                    break
                
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á –∏–∑ {len(places)} –∑–∞–ø–∏—Å–µ–π")
                
                for place in places:
                    try:
                        self._process_place(place, db)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
                        self.error_count += 1
                        self._mark_as_error(place, str(e), db)
                
                db.commit()
                self.processed_count += len(places)
                
        finally:
            db.close()
    
    def _process_place(self, place: Place, db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ AI-–∞–≥–µ–Ω—Ç–æ–º"""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ: {place.name}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, —Ç–µ–≥–∏, –æ–ø–∏—Å–∞–Ω–∏–µ)
        verification_result = self._verify_place_data(place)
        
        # 2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ, –∏—â–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫
        correction_result = None
        if not verification_result.get("data_accurate", True):
            logger.info(f"üîß –î–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ {place.name} –Ω–µ—Ç–æ—á–Ω—ã–µ, –∏—â–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ...")
            correction_result = self._search_correct_data(place)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ
            if correction_result and correction_result.get("found_better_data"):
                self._apply_data_corrections(place, correction_result, db)
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è summary –∏ —Ç–µ–≥–æ–≤
                self._trigger_resummarize(place, db)
        
        # 3. –ò—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_result = self._find_quality_images(place)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        completion_result = self._complete_missing_fields(place)
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        self._update_place(place, verification_result, image_result, completion_result, correction_result, db)
        
        self.verified_count += 1
        logger.info(f"‚úÖ –ú–µ—Å—Ç–æ {place.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    def _verify_place_data(self, place: Place) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞ (–∏–º—è, —Ç–µ–≥–∏, –æ–ø–∏—Å–∞–Ω–∏–µ)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            gpt_verification = self._gpt_verify_place_data(place)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data_accurate = (
                gpt_verification.get("name_correct", True) and
                gpt_verification.get("description_correct", True) and
                gpt_verification.get("tags_correct", True)
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return {
                "gpt_verification": gpt_verification,
                "data_accurate": data_accurate,
                "issues": gpt_verification.get("issues", []),
                "suggestions": gpt_verification.get("suggestions", [])
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
            return {
                "web_verification": None,
                "gpt_verification": None,
                "overall_verification": "error",
                "issues": [f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}"],
                "suggestions": []
            }
    
    def _gpt_verify_place_data(self, place: Place) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT"""
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
            prompt = f"""Analyze this restaurant data for accuracy:

Name: {place.name}
Category: {place.category}
Description: {place.description_full or place.summary or 'No description'}
Tags: {place.tags_csv or 'No tags'}

Check if:
1. Name is correct and properly formatted
2. Description is accurate and informative
3. Tags are relevant and appropriate
4. Category matches the place type

Answer with JSON: {{
    "name_correct": true/false,
    "description_correct": true/false, 
    "tags_correct": true/false,
    "category_correct": true/false,
    "issues": ["list of specific issues found"],
    "suggestions": ["suggestions for improvement"]
}}"""
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.1,
                max_tokens=200
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            response_text = response.choices[0].message.content.strip()
            if not response_text:
                logger.warning("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return self._get_default_verification_result()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                result = self._parse_gpt_json_response(response_text)
                if result is None:
                    return self._get_default_verification_result()
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                required_keys = ["name_correct", "category_correct", "description_correct"]
                if not all(key in result for key in required_keys):
                    logger.warning("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON")
                    return self._get_default_verification_result()
                return result
            except json.JSONDecodeError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT –æ—Ç–≤–µ—Ç–∞: {e}")
                logger.warning(f"–û—Ç–≤–µ—Ç GPT: {response_text[:100]}...")
                return self._get_default_verification_result()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
            return self._get_default_verification_result()
    
    def _parse_gpt_json_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ GPT –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markdown —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if "```json" in response_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
                start = response_text.find("```json") + 7
                end = response_text.find("```", start)
                if end != -1:
                    json_text = response_text[start:end].strip()
                else:
                    json_text = response_text[start:].strip()
            elif "```" in response_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –±–ª–æ–∫–∞
                start = response_text.find("```") + 3
                end = response_text.find("```", start)
                if end != -1:
                    json_text = response_text[start:end].strip()
                else:
                    json_text = response_text[start:].strip()
            else:
                json_text = response_text.strip()
            
            return json.loads(json_text)
        except json.JSONDecodeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.warning(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {response_text[:200]}...")
            return None

    def _check_if_needs_resummarize(self, place: Place) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –ø–æ –∫—É—Ö–Ω–µ, —Ç–∏–ø—É –º–µ—Å—Ç–∞ –∏ —Ç.–¥.
        if not place.tags_csv:
            return True
        
        tags = place.tags_csv.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ –∫—É—Ö–Ω–∏
        cuisine_tags = ['thai', 'italian', 'japanese', 'chinese', 'indian', 'french', 'korean', 'vietnamese', 'mexican', 'mediterranean', 'guangdong', 'european']
        has_cuisine = any(cuisine in tags for cuisine in cuisine_tags)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ —Å—Ç–∏–ª—è
        style_tags = ['fine_dining', 'casual', 'street_food', 'rooftop', 'speakeasy', 'luxury', 'traditional', 'modern', 'vegetarian', 'sustainable']
        has_style = any(style in tags for style in style_tags)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
        atmosphere_tags = ['intimate', 'energetic', 'upscale', 'cozy', 'minimalist', 'creative', 'family_friendly', 'adult', 'chill', 'community']
        has_atmosphere = any(atmosphere in tags for atmosphere in atmosphere_tags)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        restaurant_specific = ['brunch', 'desserts', 'noodles', 'craft_coffee', 'specialty_coffee', 'streetwear', 'trendy']
        has_restaurant_specific = any(specific in tags for specific in restaurant_specific)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ–≥–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
        if not (has_cuisine or has_style or has_atmosphere or has_restaurant_specific):
            logger.info(f"–ú–µ—Å—Ç–æ {place.name} –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ (–Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ–≥–æ–≤)")
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –∫—É—Ö–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
        if place.category and 'restaurant' in place.category.lower() and not has_cuisine:
            logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω {place.name} –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ–≥–∞—Ö –∫—É—Ö–Ω–∏")
            return True
        
        return False

    def _get_default_verification_result(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return {
            "name_correct": True,
            "category_correct": True,
            "description_correct": True,
            "tags_correct": True,
            "issues": [],
            "suggestions": []
        }
    
    def _search_correct_data(self, place: Place) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫"""
        try:
            logger.info(f"üîç –ò—â–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {place.name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            web_data = self.web_verifier.verify_place_data(
                place.name,
                place.category,
                place.address
            )
            
            if web_data and web_data.get("verified"):
                # –ï—Å–ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    "found_better_data": True,
                    "source": "web_search",
                    "corrected_name": web_data.get("corrected_name", place.name),
                    "corrected_description": web_data.get("corrected_description"),
                    "corrected_tags": web_data.get("corrected_tags"),
                    "confidence": web_data.get("confidence", 0.8),
                    "sources": web_data.get("sources", [])
                }
            else:
                # –ï—Å–ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –ø–æ–º–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                return self._gpt_improve_data(place)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {place.name}: {e}")
            return self._gpt_improve_data(place)
    
    def _gpt_improve_data(self, place: Place) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            prompt = f"""Improve this restaurant data based on common knowledge:

Current Name: {place.name}
Current Category: {place.category}
Current Description: {place.description_full or place.summary or 'No description'}
Current Tags: {place.tags_csv or 'No tags'}

Provide improved, more accurate data:

Answer with JSON: {{
    "corrected_name": "improved name",
    "corrected_description": "better description",
    "corrected_tags": "improved,tags,list",
    "improvements_made": ["list of improvements"],
    "confidence": 0.8
}}"""
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=500
            )
            
            response_text = response.choices[0].message.content.strip()
            if not response_text:
                return {"found_better_data": False}
            
            try:
                result = self._parse_gpt_json_response(response_text)
                if result is None:
                    return self._get_default_verification_result()
                result["found_better_data"] = True
                result["source"] = "gpt_improvement"
                return result
            except json.JSONDecodeError:
                return {"found_better_data": False}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT —É–ª—É—á—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {place.name}: {e}")
            return {"found_better_data": False}
    
    def _apply_data_corrections(self, place: Place, correction_result: Dict[str, Any], db: Session):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º –º–µ—Å—Ç–∞"""
        try:
            updated = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ
            if correction_result.get("corrected_name") and correction_result["corrected_name"] != place.name:
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: {place.name} -> {correction_result['corrected_name']}")
                place.name = correction_result["corrected_name"]
                updated = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ
            if correction_result.get("corrected_description"):
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {place.name}")
                place.description_full = correction_result["corrected_description"]
                updated = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ª—É—á—à–∏–µ
            if correction_result.get("corrected_tags"):
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è {place.name}")
                place.tags_csv = correction_result["corrected_tags"]
                updated = True
            
            if updated:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ summary, —á—Ç–æ–±—ã —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª
                # tags_csv –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º
                place.summary = None
                place.processing_status = 'new'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
                place.updated_at = datetime.now()
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ {place.name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {place.name}: {e}")
    
    def _trigger_resummarize(self, place: Place, db: Session):
        """–ó–∞–ø—É—Å–∫ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è summary –∏ —Ç–µ–≥–æ–≤"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.info(f"üîÑ –ú–µ—Å—Ç–æ {place.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–æ–º")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
            # - –û—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á (Celery/RQ)
            # - –í—ã–∑–æ–≤ API —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
            # - –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (—á—Ç–æ –º—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è {place.name}: {e}")
    
    def _get_default_completion_result(self, place: Place) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π"""
        # –£–º–Ω—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = place.category.lower() if place.category else ""
        
        if "bar" in category or "nightclub" in category:
            tags = "bar,nightlife,drinks"
            price_level = 3
        elif "restaurant" in category or "cafe" in category:
            tags = "restaurant,food,dining"
            price_level = 2
        elif "entertainment" in category:
            tags = "entertainment,fun,activity"
            price_level = 2
        else:
            tags = "restaurant,food,thai"
            price_level = 2
        
        return {
            "description": place.description_full or place.summary or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "tags": tags,
            "hours": {},
            "price_level": price_level
        }
    
    def _find_quality_images(self, place: Place) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Å—Ç–∞"""
        try:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ –∏—â–µ–º –Ω–æ–≤–æ–µ
            if place.picture_url and place.picture_url.strip():
                logger.info(f"–£ –º–µ—Å—Ç–∞ {place.name} —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {place.picture_url[:50]}...")
                return {
                    "found": True,
                    "url": place.picture_url,
                    "source": "existing",
                    "quality": "existing"
                }
            
            # –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            logger.info(f"–£ –º–µ—Å—Ç–∞ {place.name} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—â–µ–º –Ω–æ–≤–æ–µ...")
            image_url = self._search_real_place_images(place)
            
            if image_url:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if "unsplash.com" in image_url:
                    source = "placeholder"
                    quality = "placeholder"
                else:
                    source = "real_search"
                    quality = "real"
                
                return {
                    "found": True,
                    "url": image_url,
                    "source": source,
                    "quality": quality
                }
            
            return {
                "found": False,
                "url": None,
                "source": None,
                "quality": None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–µ—Å—Ç–∞ {place.id}: {e}")
            return {
                "found": False,
                "url": None,
                "source": "error",
                "quality": None
            }
    
    def _search_real_place_images(self, place: Place) -> str:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–µ—Å—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ picture_url –ø—É—Å—Ç–æ–µ)"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Google Places API
            if place.gmaps_place_id:
                google_photos = self._get_google_place_photos(place.gmaps_place_id, place)
                if google_photos:
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ Google Places API –¥–ª—è {place.name}")
                    return google_photos
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è {place.name}")
            return self._get_fallback_image(place)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {place.name}: {e}")
            return self._get_fallback_image(place)
    
    def _search_google_images(self, place: Place) -> str:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API"""
        try:
            search_query = f"{place.name} {place.category} Bangkok Thailand"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Custom Search API
            api_key = os.getenv('GOOGLE_API_KEY', 'AIzaSyBjExK9M7wOu929zQNbnlFJ8kjr-QreP6w')
            search_engine_id = os.getenv('GOOGLE_SEARCH_ENGINE_ID', 'your_search_engine_id')
            
            if not search_engine_id or search_engine_id == 'your_search_engine_id':
                return None
            
            # –ó–∞–ø—Ä–æ—Å –∫ Google Custom Search API
            url = "https://www.googleapis.com/customsearch/v1"
            params = {
                'key': api_key,
                'cx': search_engine_id,
                'q': search_query,
                'searchType': 'image',
                'num': 5,
                'imgSize': 'medium',
                'imgType': 'photo',
                'safe': 'medium'
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if 'items' in data and data['items']:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                for item in data['items']:
                    image_url = item.get('link', '')
                    if self._is_quality_real_image(image_url, place):
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google –¥–ª—è {place.name}")
                        return image_url
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                first_image = data['items'][0].get('link', '')
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google –¥–ª—è {place.name}")
                return first_image
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Google Custom Search –¥–ª—è {place.name}: {e}")
            return None
    
    def _search_duckduckgo_images(self, place: Place) -> str:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo (–±–µ–∑ API)"""
        try:
            search_query = f"{place.name} {place.category} Bangkok"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            search_url = "https://duckduckgo.com/"
            params = {
                'q': search_query,
                'iax': 'images',
                'ia': 'images'
            }
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(search_url, params=params, headers=headers, timeout=10)
            response.raise_for_status()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            import re
            img_pattern = r'https://[^"\s]+\.(?:jpg|jpeg|png|webp)(?:\?[^"\s]*)?'
            matches = re.findall(img_pattern, response.text, re.IGNORECASE)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for url in matches[:10]:
                if self._is_quality_real_image(url, place):
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DuckDuckGo –¥–ª—è {place.name}")
                    return url
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ DuckDuckGo –ø–æ–∏—Å–∫–∞ –¥–ª—è {place.name}: {e}")
            return None
    
    def _is_quality_real_image(self, url: str, place: Place) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
            if not url or not url.startswith('http'):
                return False
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∞–≤–∞—Ç–∞—Ä—ã
            excluded_domains = ['facebook.com', 'instagram.com', 'twitter.com', 'linkedin.com', 'pinterest.com']
            if any(domain in url.lower() for domain in excluded_domains):
                return False
            
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            if any(param in url.lower() for param in ['w=800', 'w=1200', 'w=1600', 'width=800', 'width=1200']):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if any(url.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                return True
            
            return True
            
        except Exception:
            return False
    
    def _get_fallback_image(self, place: Place) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü—Ä–æ—Å—Ç—ã–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        placeholders = {
            "restaurant": "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400",
            "bar": "https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=400",
            "cafe": "https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=400",
            "entertainment": "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400"
        }
        
        category = place.category.lower() if place.category else ""
        
        for key, url in placeholders.items():
            if key in category:
                return url
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400"
    
    def _get_google_place_photos(self, place_id: str, place: Place = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π Google Places API"""
        try:
            api_key = os.getenv('GOOGLE_MAPS_API_KEY', 'AIzaSyBjExK9M7wOu929zQNbnlFJ8kjr-QreP6w')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Places API
            url = f"https://places.googleapis.com/v1/places/{place_id}"
            headers = {
                'Content-Type': 'application/json',
                'X-Goog-Api-Key': api_key,
                'X-Goog-FieldMask': 'photos'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if 'photos' in data:
                photos = data['photos']
                
                if photos:
                    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏–ª–∏ –µ–¥–æ–π
                    best_photo = self._select_best_photo(photos, place)
                    if best_photo:
                        photo_name = best_photo['name']
                        
                        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                        photo_url = self._get_google_photo_url_new(photo_name, api_key)
                        
                        if photo_url:
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è Google Places: {photo_url[:50]}...")
                            return photo_url
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Google Places: {e}")
            return None
    
    def _get_google_photo_url_new(self, photo_name: str, api_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π Google Places API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Places API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            url = f"https://places.googleapis.com/v1/{photo_name}/media"
            params = {
                'maxWidthPx': 800,  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                'key': api_key
            }
            
            response = requests.get(url, params=params, allow_redirects=False, timeout=10)
            
            if response.status_code == 302:  # Redirect
                return response.headers.get('Location', '')
            elif response.status_code == 200:
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                return url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return None
    
    def _get_google_photo_url(self, photo_reference: str, api_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ photo_reference (—Å—Ç–∞—Ä—ã–π API)"""
        try:
            url = "https://maps.googleapis.com/maps/api/place/photo"
            params = {
                'photo_reference': photo_reference,
                'maxwidth': 800,  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                'key': api_key
            }
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
            response = requests.get(url, params=params, allow_redirects=False, timeout=10)
            
            if response.status_code == 302:  # Redirect
                return response.headers.get('Location', '')
            elif response.status_code == 200:
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                return url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return None
    
    def _find_google_place_id(self, place: Place) -> str:
        """–ü–æ–∏—Å–∫ Google Place ID –¥–ª—è –º–µ—Å—Ç–∞"""
        try:
            api_key = os.getenv('GOOGLE_MAPS_API_KEY', 'AIzaSyBjExK9M7wOu929zQNbnlFJ8kjr-QreP6w')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Text Search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞
            url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
            params = {
                'query': f"{place.name} {place.category} Bangkok",
                'location': f"{place.lat},{place.lng}",
                'radius': 1000,  # 1–∫–º —Ä–∞–¥–∏—É—Å
                'key': api_key
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if data.get('status') == 'OK' and 'results' in data:
                results = data['results']
                
                if results:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                    place_id = results[0].get('place_id')
                    logger.info(f"–ù–∞–π–¥–µ–Ω Google Place ID –¥–ª—è {place.name}: {place_id}")
                    return place_id
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Google Place ID –¥–ª—è {place.name}: {e}")
            return None
    
    def _select_best_photo(self, photos: list, place: Place) -> dict:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏–ª–∏ –µ–¥–æ–π"""
        try:
            if not photos:
                return None
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏ –µ–¥–æ–π
            interior_keywords = [
                'interior', 'inside', 'dining', 'seating', 'table', 'chair', 
                'restaurant', 'cafe', 'bar', 'kitchen', 'counter', 'decor',
                'atmosphere', 'ambiance', 'space', 'room', 'hall'
            ]
            
            food_keywords = [
                'food', 'dish', 'meal', 'plate', 'drink', 'coffee', 'tea',
                'cocktail', 'beer', 'wine', 'dessert', 'cake', 'pasta',
                'pizza', 'sushi', 'thai', 'cuisine', 'menu', 'serving'
            ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            scored_photos = []
            
            for photo in photos:
                score = 0
                photo_info = photo.get('authorAttributions', [{}])[0]
                display_name = photo_info.get('displayName', '').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
                width = photo.get('widthPx', 0)
                height = photo.get('heightPx', 0)
                if width >= 1000 and height >= 1000:
                    score += 10
                elif width >= 800 and height >= 800:
                    score += 5
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ (—á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–∏–ø —Ñ–æ—Ç–æ)
                for keyword in interior_keywords:
                    if keyword in display_name:
                        score += 15
                        break
                
                for keyword in food_keywords:
                    if keyword in display_name:
                        score += 20  # –ï–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–¥–∞–Ω–∏—è
                if any(word in display_name for word in ['exterior', 'outside', 'building', 'facade', 'street']):
                    score -= 10
                
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                if place and place.name and place.name.lower() in display_name:
                    score += 25
                
                scored_photos.append((score, photo))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
            scored_photos.sort(key=lambda x: x[0], reverse=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            if scored_photos:
                best_score, best_photo = scored_photos[0]
                logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ —Å—á–µ—Ç–æ–º {best_score} –¥–ª—è {place.name}")
                return best_photo
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é
            return photos[0]
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return photos[0] if photos else None
    
    
    def _is_quality_image(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL
            if not url or not url.startswith('http'):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            quality_extensions = ['.jpg', '.jpeg', '.png', '.webp']
            if not any(url.lower().endswith(ext) for ext in quality_extensions):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–ø–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)
            if 'w=' in url or 'width=' in url:
                return True
            
            return True
            
        except Exception:
            return False
    
    def _select_best_image(self, urls: List[str], place: Place) -> Optional[str]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö"""
        if not urls:
            return None
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞
        for url in urls:
            if self._is_quality_image(url):
                return url
        
        return urls[0] if urls else None
    
    def _complete_missing_fields(self, place: Place) -> Dict[str, Any]:
        """–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π"""
        try:
            missing_fields = []
            suggestions = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if not place.description_full and not place.summary:
                missing_fields.append("description")
            
            if not place.tags_csv:
                missing_fields.append("tags")
            
            if not place.hours_json:
                missing_fields.append("hours")
            
            if not place.price_level:
                missing_fields.append("price_level")
            
            if missing_fields:
                # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
                prompt = f"""Add missing data for restaurant:

Name: {place.name}
Category: {place.category}

Missing: {', '.join(missing_fields)}

Return JSON: {{"price_level": 2, "tags": "restaurant,food"}}"""
                
                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3,
                    max_tokens=300
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                response_text = response.choices[0].message.content.strip()
                if not response_text:
                    logger.warning("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π")
                    result = self._get_default_completion_result(place)
                else:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
                    try:
                        result = self._parse_gpt_json_response(response_text)
                        if result is None:
                            return self._get_default_verification_result()
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        if not isinstance(result, dict):
                            raise ValueError("Result is not a dictionary")
                    except (json.JSONDecodeError, ValueError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
                        logger.warning(f"–û—Ç–≤–µ—Ç GPT: {response_text[:100]}...")
                        result = self._get_default_completion_result(place)
            else:
                result = {}
                return {
                    "missing_fields": missing_fields,
                    "completions": result,
                    "success": True
                }
            
            return {
                "missing_fields": [],
                "completions": {},
                "success": True
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –º–µ—Å—Ç–∞ {place.id}: {e}")
            return {
                "missing_fields": [],
                "completions": {},
                "success": False,
                "error": str(e)
            }
    
    def _update_place(self, place: Place, verification: Dict, image: Dict, completion: Dict, correction: Dict, db: Session):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            updated = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            place.ai_verified = True
            place.ai_verification_date = datetime.now()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
            if correction and correction.get("found_better_data"):
                logger.info(f"üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {place.name}")
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ _apply_data_corrections
                # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if correction.get("source") == "web_search":
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {correction.get('confidence', 0)})")
                elif correction.get("source") == "gpt_improvement":
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω—ã —á–µ—Ä–µ–∑ GPT (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {correction.get('confidence', 0)})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –º–µ—Å—Ç–∞ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ
            if image.get("found") and image.get("url"):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –º–µ—Å—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ
                if not place.picture_url or place.picture_url.strip() == "":
                    place.picture_url = image["url"]
                    updated = True
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {place.name}: {image['url'][:50]}...")
                elif image.get("url") != place.picture_url:
                    place.picture_url = image["url"]
                    updated = True
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {place.name}: {image['url'][:50]}...")
                else:
                    logger.info(f"–£ –º–µ—Å—Ç–∞ {place.name} —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if completion.get("success") and completion.get("completions"):
                comp = completion["completions"]
                
                if not place.description_full and comp.get("description"):
                    place.description_full = comp["description"]
                    updated = True
                
                if not place.tags_csv and comp.get("tags"):
                    place.tags_csv = comp["tags"]
                    updated = True
                
                if not place.hours_json and comp.get("hours"):
                    place.hours_json = json.dumps(comp["hours"])
                    updated = True
                
                if not place.price_level and comp.get("price_level"):
                    place.price_level = comp["price_level"]
                    updated = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
            needs_resummarize = self._check_if_needs_resummarize(place)
            if needs_resummarize:
                logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {place.name} –≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤")
                place.summary = None
                place.tags_csv = None
                place.processing_status = 'new'
                updated = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_data = {
                "verification": verification,
                "image_search": image,
                "completion": completion,
                "data_correction": correction,
                "needs_resummarize": needs_resummarize,
                "processed_at": datetime.now().isoformat()
            }
            place.ai_verification_data = json.dumps(verification_data)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å published —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI Editor
            if not needs_resummarize:  # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
                place.processing_status = 'published'
                place.published_at = datetime.now()
                logger.info(f"‚úÖ –ú–µ—Å—Ç–æ {place.name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                updated = True
            
            if updated:
                place.updated_at = datetime.now()
                self.updated_count += 1
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {place.name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ {place.id}: {e}")
            raise
    
    def _mark_as_error(self, place: Place, error: str, db: Session):
        """–ü–æ–º–µ—Ç–∫–∞ –º–µ—Å—Ç–∞ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–≥–æ"""
        place.processing_status = 'error'
        place.last_error = error
        place.updated_at = datetime.now()
        db.add(place)
    
    def _print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Editor Agent:")
        logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—Ç: {self.processed_count}")
        logger.info(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.verified_count}")
        logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.updated_count}")
        logger.info(f"  –û—à–∏–±–æ–∫: {self.error_count}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='AI Editor Agent')
    parser.add_argument('--batch-size', type=int, default=5, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--api-key', type=str, help='OpenAI API –∫–ª—é—á')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞
    if args.api_key:
        os.environ['OPENAI_API_KEY'] = args.api_key
    
    try:
        agent = AIEditorAgent(
            api_key=args.api_key,
            batch_size=args.batch_size
        )
        
        print("ü§ñ –ó–∞–ø—É—Å–∫ AI Editor Agent...")
        print(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
        print(f"üîë API –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENAI_API_KEY') else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        print("-" * 50)
        
        agent.run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
