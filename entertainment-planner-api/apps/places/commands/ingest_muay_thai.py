#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–≥–µ—Å—Ç–∏–∏ Muay Thai –º–µ—Å—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
"""
import sys
import os
import csv
import json
from datetime import datetime
from typing import List, Dict, Any

# Add the project root to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from sqlalchemy.orm import Session
from apps.core.db import SessionLocal
from apps.places.models import Place
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def ingest_muay_thai_places(csv_file_path: str, limit: int = None) -> int:
    """
    –ò–Ω–≥–µ—Å—Ç–∏—è Muay Thai –º–µ—Å—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
    
    Args:
        csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (None = –≤—Å–µ)
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
    """
    db = SessionLocal()
    
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–≥–µ—Å—Ç–∏—é Muay Thai –º–µ—Å—Ç –∏–∑: {csv_file_path}")
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        places_data = []
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['name'].strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    places_data.append({
                        'name': row['name'].strip(),
                        'description_full': row['description_full'].strip(),
                        'source_url': row['source_url'].strip()
                    })
        
        if limit:
            places_data = places_data[:limit]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(places_data)} –º–µ—Å—Ç –∏–∑ CSV")
        
        added_count = 0
        skipped_count = 0
        
        for i, place_data in enumerate(places_data, 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ
                existing = db.query(Place).filter(
                    Place.source_url == place_data['source_url']
                ).first()
                
                if existing:
                    logger.info(f"‚è≠Ô∏è  –ú–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {place_data['name']}")
                    skipped_count += 1
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
                place = Place(
                    name=place_data['name'],
                    description_full=place_data['description_full'],
                    category='fitness_gym',  # Muay Thai gyms
                    tags_csv='',
                    summary='',
                    lat=13.7563,  # Bangkok center
                    lng=100.5018,
                    source='muay_thai_batch_01',
                    source_url=place_data['source_url'],
                    raw_payload=json.dumps({
                        'name': place_data['name'],
                        'description_full': place_data['description_full'],
                        'source_url': place_data['source_url'],
                        'category': 'fitness_gym'
                    }),
                    scraped_at=datetime.now(),
                    processing_status='new'  # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT –≤–æ—Ä–∫–µ—Ä–æ–º
                )
                
                db.add(place)
                db.commit()
                
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ {i}/{len(places_data)}: {place_data['name']}")
                added_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞ {place_data['name']}: {e}")
                db.rollback()
                continue
        
        logger.info(f"üéâ –ò–Ω–≥–µ—Å—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
        logger.info(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        
        return added_count
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ò–Ω–≥–µ—Å—Ç–∏—è Muay Thai –º–µ—Å—Ç –∏–∑ CSV')
    parser.add_argument('--csv-file', required=True, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
    parser.add_argument('--limit', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        count = ingest_muay_thai_places(args.csv_file, args.limit)
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –º–µ—Å—Ç!")
        print("üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ GPT –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print("   python apps/places/commands/run_gpt_worker.py --batch-size 5")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
