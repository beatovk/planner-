#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python -m apps.places.commands.validate_synonyms [--fix]
"""

import argparse
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from apps.places.services.synonyms_validator import validate_synonyms, get_synonyms_health


def main():
    parser = argparse.ArgumentParser(description="–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
    parser.add_argument("--fix", action="store_true", help="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    parser.add_argument("--health", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å health –º–µ—Ç—Ä–∏–∫–∏")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    if args.health:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º health –º–µ—Ç—Ä–∏–∫–∏
        metrics = get_synonyms_health()
        
        print("üîç Health –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤:")
        print(f"   - –ó–¥–æ—Ä–æ–≤: {'‚úÖ' if metrics['is_healthy'] else '‚ùå'}")
        print(f"   - –°–ª–æ—Ç–æ–≤: {metrics['total_slots']}")
        print(f"   - Expands: {metrics['total_expands']}")
        print(f"   - –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤: {metrics['invalid_tags']}")
        print(f"   - –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {metrics['duplicate_synonyms']}")
        print(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö canonical: {metrics['missing_canonicals']}")
        print(f"   - –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: {metrics['valid_tags_count']}")
        
        if args.verbose and metrics['warnings']:
            print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in metrics['warnings'][:10]:
                print(f"   - {warning}")
            if len(metrics['warnings']) > 10:
                print(f"   ... –∏ –µ—â–µ {len(metrics['warnings']) - 10}")
        
        if args.verbose and metrics['errors']:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in metrics['errors']:
                print(f"   - {error}")
        
        return 0 if metrics['is_healthy'] else 1
    
    else:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        result = validate_synonyms()
        
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤:")
        print(f"   - –í–∞–ª–∏–¥–µ–Ω: {'‚úÖ' if result.is_valid else '‚ùå'}")
        print(f"   - –°–ª–æ—Ç–æ–≤: {result.stats['total_slots']}")
        print(f"   - Expands: {result.stats['total_expands']}")
        print(f"   - –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(result.warnings)}")
        
        if result.errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in result.errors:
                print(f"   - {error}")
        
        if args.verbose and result.warnings:
            print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in result.warnings[:20]:
                print(f"   - {warning}")
            if len(result.warnings) > 20:
                print(f"   ... –∏ –µ—â–µ {len(result.warnings) - 20}")
        
        if args.fix and result.errors:
            print("\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        
        return 0 if result.is_valid else 1


if __name__ == "__main__":
    sys.exit(main())
