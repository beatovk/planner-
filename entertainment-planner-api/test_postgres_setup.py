#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
from pathlib import Path

def test_config():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from apps.core.config import settings
        print(f"‚úÖ Settings –∑–∞–≥—Ä—É–∂–µ–Ω—ã: database_url = {settings.database_url}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_database_url():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL"""
    print("\nüîß –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL...")
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export DATABASE_URL='postgresql+psycopg://ep:ep@localhost:5432/ep'")
        return False
    
    if not (db_url.startswith("postgresql://") or db_url.startswith("postgresql+psycopg://")):
        print(f"‚ùå DATABASE_URL –Ω–µ PostgreSQL: {db_url}")
        print("üí° –û–∂–∏–¥–∞–µ—Ç—Å—è: postgresql+psycopg://user:pass@host:port/db")
        return False
    
    print(f"‚úÖ DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {db_url}")
    return True

def test_database_connection():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("\nüîß –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    try:
        from apps.core.db import engine, DB_URL
        print(f"‚úÖ Engine —Å–æ–∑–¥–∞–Ω: {DB_URL.split('@')[-1] if '@' in DB_URL else 'masked'}")
        
        with engine.connect() as conn:
            from sqlalchemy import text
            result = conn.execute(text("SELECT 1")).scalar()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É places
            places_count = conn.execute(text("SELECT COUNT(*) FROM places")).scalar()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ places: {places_count} –∑–∞–ø–∏—Å–µ–π")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_api_health():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check API"""
    print("\nüîß –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check API...")
    try:
        from apps.api.main import health_db
        result = health_db()
        
        if result.get("ok"):
            print(f"‚úÖ Health check: OK")
            print(f"   Driver: {result.get('driver')}")
            print(f"   Places: {result.get('places_count')}")
            print(f"   DSN: {result.get('dsn')}")
            return True
        else:
            print(f"‚ùå Health check failed: {result.get('error')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n")
    
    tests = [
        test_config,
        test_database_url,
        test_database_connection,
        test_api_health
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É PostgreSQL.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
