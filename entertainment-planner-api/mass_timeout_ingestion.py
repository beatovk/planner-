#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ TimeOut Bangkok —Å—Ç–∞—Ç–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from enhanced_timeout_adapter import EnhancedTimeOutAdapter as TimeOutAdapter
from apps.places.models import Place
from sqlalchemy import func
import time

# –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
TIMEOUT_URLS = [
    "https://www.timeout.com/bangkok/restaurants/bangkoks-top-10-spots-for-health-conscious-dining",
    "https://www.timeout.com/bangkok/restaurants/best-breakfast-restaurants-in-bangkok",
    "https://www.timeout.com/bangkok/restaurants/bangkoks-best-garden-cafes",
    "https://www.timeout.com/bangkok/restaurants/best-juice-bars-around-bangkok-to-beat-the-heat",
    "https://www.timeout.com/bangkok/shopping/bookstores-cafe-coffee",
    "https://www.timeout.com/bangkok/news/thailand-leads-asias-50-best-restaurants-2025-032625",
    "https://www.timeout.com/bangkok/news/haoma-sustainable-indian-dining-thats-mighty-fine-042325",
    "https://www.timeout.com/bangkok/news/review-what-to-expect-from-the-shake-shack-x-potong-collab-051525",
    "https://www.timeout.com/bangkok/bakery-shops",
    "https://www.timeout.com/bangkok/restaurants/best-bakeries-to-find-perfect-sourdough-bread",
    "https://www.timeout.com/bangkok/restaurants/best-donut-shops-in-bangkok",
    "https://www.timeout.com/bangkok/restaurants/best-restaurants-and-cafes-asoke",
    "https://www.timeout.com/bangkok/restaurants/best-places-to-eat-iconsiam",
    "https://www.timeout.com/bangkok/restaurants/best-restaurants-ari",
    "https://www.timeout.com/bangkok/restaurants/best-restaurants-charoenkrung",
    "https://www.timeout.com/bangkok/best-restaurants-and-cafes-in-soi-sukhumvit-31"
]

def get_existing_places():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    db = SessionLocal()
    try:
        places = db.query(Place.name, Place.source_url).all()
        return {(p.name.lower().strip(), p.source_url) for p in places}
    finally:
        db.close()

def save_places(places_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        existing_places = get_existing_places()
        new_count = 0
        duplicate_count = 0
        
        for place_data in places_data:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            name_key = place_data['title'].lower().strip()
            source_url = place_data['detail_url'] or f"timeout_{place_data['title'].replace(' ', '_')}"
            
            if (name_key, source_url) in existing_places:
                duplicate_count += 1
                print(f"  –î—É–±–ª–∏–∫–∞—Ç: {place_data['title']}")
                continue
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
            place = Place(
                name=place_data['title'],
                description_full=place_data.get('description_full'),
                category=place_data.get('category'),
                address=place_data.get('address'),
                hours_json=place_data.get('hours_text'),
                lat=place_data.get('lat'),
                lng=place_data.get('lng'),
                picture_url=place_data.get('picture_url'),
                source='timeout',
                source_url=source_url,
                processing_status='new',
                raw_payload=str(place_data)
            )
            
            db.add(place)
            new_count += 1
            print(f"  –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: {place_data['title']}")
        
        db.commit()
        return new_count, duplicate_count
        
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return 0, 0
    finally:
        db.close()

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ TimeOut Bangkok...")
    print(f"üìã –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(TIMEOUT_URLS)}")
    print("=" * 60)
    
    adapter = TimeOutAdapter()
    total_new = 0
    total_duplicates = 0
    
    for i, url in enumerate(TIMEOUT_URLS, 1):
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(TIMEOUT_URLS)}: {url}")
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
            places_data = adapter.parse_list_page(url)
            print(f"  –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {len(places_data)}")
            
            if places_data:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
                new_count, duplicate_count = save_places(places_data)
                total_new += new_count
                total_duplicates += duplicate_count
                print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö: {new_count}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}")
            else:
                print("  ‚ö†Ô∏è  –ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(TIMEOUT_URLS):
            print("  ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(2)
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {len(TIMEOUT_URLS)}")
    print(f"  –ù–æ–≤—ã—Ö –º–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_new}")
    print(f"  –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {total_duplicates}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ
    db = SessionLocal()
    try:
        total_places = db.query(Place).count()
        new_places = db.query(Place).filter(Place.processing_status == 'new').count()
        print(f"  –í—Å–µ–≥–æ –º–µ—Å—Ç –≤ –±–∞–∑–µ: {total_places}")
        print(f"  –ú–µ—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new': {new_places}")
    finally:
        db.close()
    
    print("\n‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
