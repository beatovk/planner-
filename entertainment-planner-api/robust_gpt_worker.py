#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π GPT –≤–æ—Ä–∫–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
"""

import os
import sys
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from apps.places.workers.gpt_normalizer import GPTNormalizerWorker
from apps.core.db import SessionLocal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RobustGPTWorker:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self, batch_size=1):
        self.batch_size = batch_size
        self.max_retries = 3
        self.retry_delay = 5
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Robust GPT Worker...")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
        
        retry_count = 0
        
        while retry_count < self.max_retries:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                db = SessionLocal()
                
                try:
                    worker = GPTNormalizerWorker(batch_size=self.batch_size)
                    worker.run()
                    
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                    retry_count = 0
                    logger.info("‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
                    retry_count += 1
                    
                    if retry_count < self.max_retries:
                        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{self.max_retries} —á–µ—Ä–µ–∑ {self.retry_delay} —Å–µ–∫...")
                        time.sleep(self.retry_delay)
                    else:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                        break
                        
                finally:
                    db.close()
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(2)
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                retry_count += 1
                
                if retry_count < self.max_retries:
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {self.retry_delay} —Å–µ–∫...")
                    time.sleep(self.retry_delay)
                else:
                    logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞")
                    break

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Robust GPT Worker')
    parser.add_argument('--batch-size', type=int, default=1, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    print("üîë API –∫–ª—é—á: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("-" * 50)
    
    worker = RobustGPTWorker(batch_size=args.batch_size)
    worker.run()

if __name__ == "__main__":
    main()
