#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Editor Agent
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.places.workers.ai_editor import AIEditorAgent
from apps.places.workers.web_verifier import WebVerifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_web_verifier():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebVerifier"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebVerifier...")
    
    verifier = WebVerifier()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "name": "Sirocco Sky Bar",
            "category": "Bar",
            "address": "Lebua at State Tower, Bangkok"
        },
        {
            "name": "Vertigo and Moon Bar",
            "category": "Bar", 
            "address": "Banyan Tree Bangkok"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        logger.info(f"\n--- –¢–µ—Å—Ç {i}: {case['name']} ---")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
        verification = verifier.verify_place_data(
            case["name"],
            case["category"],
            case["address"]
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification}")
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = verifier.search_quality_images(
            case["name"],
            case["category"]
        )
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        for j, img in enumerate(images[:3], 1):
            logger.info(f"  {j}. {img}")


def test_ai_editor_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Editor Agent"""
    logger.info("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Editor Agent...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    
    try:
        agent = AIEditorAgent(batch_size=2)
        
        logger.info("‚úÖ AI Editor Agent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {agent.batch_size}")
        logger.info(f"üîë API –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENAI_API_KEY') else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (—Ç–æ–ª—å–∫–æ 2 –º–µ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        agent.run()
        
        logger.info("‚úÖ AI Editor Agent –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI Editor Agent: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI Editor Agent")
    logger.info("=" * 60)
    
    # –¢–µ—Å—Ç 1: WebVerifier
    try:
        test_web_verifier()
        logger.info("‚úÖ WebVerifier —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå WebVerifier —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 2: AI Editor Agent
    try:
        success = test_ai_editor_agent()
        if success:
            logger.info("‚úÖ AI Editor Agent —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        else:
            logger.error("‚ùå AI Editor Agent —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå AI Editor Agent —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    logger.info("\n" + "=" * 60)
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
