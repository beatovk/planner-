#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏ –µ–¥–æ–π
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place
from apps.places.workers.ai_editor import AIEditorAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_photo_selection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    logger.info("üì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏ –µ–¥–æ–π")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ —Å Google Place ID
        places = db.query(Place).filter(
            Place.processing_status == 'published',
            Place.gmaps_place_id.isnot(None),
            Place.gmaps_place_id != 'mock_place_1705'  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        ).limit(3).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç —Å Google Place ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º AI Editor Agent
        agent = AIEditorAgent()
        
        results = []
        for i, place in enumerate(places, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}: {place.name} ---")
            logger.info(f"Google Place ID: {place.gmaps_place_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ Google Places API
            try:
                photo_url = agent._search_real_place_images(place)
                
                result = {
                    "name": place.name,
                    "place_id": place.gmaps_place_id,
                    "found": photo_url is not None,
                    "url": photo_url or "",
                    "source": "google_places" if photo_url else "none"
                }
                
                results.append(result)
                
                if photo_url:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è Google Places")
                    logger.info(f"   URL: {photo_url[:80]}...")
                else:
                    logger.info(f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
                results.append({
                    "name": place.name,
                    "place_id": place.gmaps_place_id,
                    "found": False,
                    "url": "",
                    "source": "error"
                })
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\n{'='*60}")
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info(f"{'='*60}")
        
        found_count = sum(1 for r in results if r["found"])
        total_count = len(results)
        
        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_count}")
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–π–¥–µ–Ω–æ: {found_count} ({found_count/total_count*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        logger.info(f"\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
        for result in results:
            if result["found"]:
                logger.info(f"  {result['name']}: {result['url'][:50]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        no_photos = [r for r in results if not r["found"]]
        if no_photos:
            logger.info(f"\n–ú–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
            for result in no_photos:
                logger.info(f"  {result['name']} (Place ID: {result['place_id']})")
        
    finally:
        db.close()


def test_photo_scoring():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    logger.info("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    test_photos = [
        {
            "name": "test_photo_1",
            "widthPx": 1920,
            "heightPx": 1080,
            "authorAttributions": [{"displayName": "Restaurant Owner"}]
        },
        {
            "name": "test_photo_2", 
            "widthPx": 800,
            "heightPx": 600,
            "authorAttributions": [{"displayName": "Food Photography"}]
        },
        {
            "name": "test_photo_3",
            "widthPx": 1200,
            "heightPx": 800,
            "authorAttributions": [{"displayName": "Interior Design"}]
        },
        {
            "name": "test_photo_4",
            "widthPx": 600,
            "heightPx": 400,
            "authorAttributions": [{"displayName": "Exterior Building"}]
        }
    ]
    
    agent = AIEditorAgent()
    place = Place(name="Test Restaurant", category="restaurant")
    
    try:
        best_photo = agent._select_best_photo(test_photos, place)
        
        if best_photo:
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {best_photo['name']}")
            logger.info(f"   –†–∞–∑–º–µ—Ä: {best_photo['widthPx']}x{best_photo['heightPx']}")
            logger.info(f"   –ê–≤—Ç–æ—Ä: {best_photo['authorAttributions'][0]['displayName']}")
        else:
            logger.info(f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    # –¢–µ—Å—Ç 1: –í—ã–±–æ—Ä –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    test_photo_selection()
    
    # –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏
    test_photo_scoring()


if __name__ == "__main__":
    main()
