#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ search_vector –∏ signals –≤ —Ç–∞–±–ª–∏—Ü—É places
"""
import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    database_url = os.getenv("DATABASE_URL", "postgresql+psycopg://ep:ep@localhost:5432/ep")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∏
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'places' 
                AND column_name IN ('search_vector', 'signals')
            """))
            existing_columns = [row[0] for row in result]
            
            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {existing_columns}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º search_vector –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'search_vector' not in existing_columns:
                print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É search_vector...")
                conn.execute(text("ALTER TABLE places ADD COLUMN search_vector tsvector;"))
                conn.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ search_vector –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ search_vector —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º signals –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'signals' not in existing_columns:
                print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É signals...")
                conn.execute(text("ALTER TABLE places ADD COLUMN signals JSONB;"))
                conn.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ signals –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ signals —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            print("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
            try:
                conn.execute(text("CREATE INDEX IF NOT EXISTS places_search_gin_idx ON places USING gin (search_vector);"))
                print("‚úÖ –ò–Ω–¥–µ–∫—Å places_search_gin_idx —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å places_search_gin_idx: {e}")
            
            try:
                conn.execute(text("CREATE INDEX IF NOT EXISTS places_signals_idx ON places USING gin (signals);"))
                print("‚úÖ –ò–Ω–¥–µ–∫—Å places_signals_idx —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å places_signals_idx: {e}")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º search_vector –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            print("–ó–∞–ø–æ–ª–Ω—è–µ–º search_vector...")
            conn.execute(text("""
                UPDATE places
                SET search_vector = to_tsvector(
                    'simple',
                    unaccent(coalesce(name,'') || ' ' || coalesce(category,'') || ' ' ||
                             coalesce(tags_csv,'') || ' ' || coalesce(summary,''))
                )
                WHERE search_vector IS NULL;
            """))
            conn.commit()
            print("‚úÖ search_vector –∑–∞–ø–æ–ª–Ω–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = conn.execute(text("SELECT COUNT(*) FROM places WHERE search_vector IS NOT NULL;"))
            count = result.scalar()
            print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π —Å search_vector: {count}")
            
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
