#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ GPT –≤–æ—Ä–∫–µ—Ä–∞
"""

import psycopg
import time
import os

def watch_progress():
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ GPT –≤–æ—Ä–∫–µ—Ä–∞...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 50)
    
    try:
        while True:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = psycopg.connect('postgresql://ep:ep@localhost:5432/ep')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('''
            SELECT processing_status, COUNT(*) 
            FROM places 
            WHERE description_full IS NOT NULL 
            AND description_full != '' 
            AND description_full != 'N/A'
            GROUP BY processing_status 
            ORDER BY processing_status
            ''')
            stats = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
            cursor.execute('''
            SELECT name, updated_at, summary
            FROM places 
            WHERE description_full IS NOT NULL 
            AND description_full != '' 
            AND description_full != 'N/A'
            AND processing_status = 'summarized'
            ORDER BY updated_at DESC 
            LIMIT 3
            ''')
            recent = cursor.fetchall()
            
            conn.close()
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            os.system('clear' if os.name == 'posix' else 'cls')
            
            print(f"üïê {time.strftime('%H:%M:%S')} - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            print("=" * 50)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = 0
            for status, count in stats:
                status_emoji = {
                    'new': '‚è≥',
                    'summarized': '‚úÖ', 
                    'enriched': 'üîç',
                    'published': 'üöÄ',
                    'error': '‚ùå'
                }.get(status, '‚ùì')
                print(f"{status_emoji} {status}: {count}")
                total += count
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            processed = sum(count for status, count in stats if status == 'summarized')
            progress = (processed / total * 100) if total > 0 else 0
            bar_length = 30
            filled_length = int(bar_length * progress / 100)
            bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {progress:.1f}% ({processed}/{total})")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
            if recent:
                print(f"\nüéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:")
                for i, (name, updated_at, summary) in enumerate(recent, 1):
                    summary_short = summary[:60] + "..." if summary and len(summary) > 60 else summary or "–ù–µ—Ç —Å–∞–º–º–∞—Ä–∏"
                    print(f"  {i}. {name}")
                    print(f"     üìù {summary_short}")
                    print(f"     ‚è∞ {updated_at.strftime('%H:%M:%S')}")
                    print()
            
            print("=" * 50)
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            
            time.sleep(3)
            
    except KeyboardInterrupt:
        print("\n\nüëã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    watch_progress()
