#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç AI Editor Agent - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –±–µ–∑ GPT
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.core.db import SessionLocal
from apps.places.models import Place

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def analyze_place_data(place: Place) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞ –±–µ–∑ GPT"""
    
    analysis = {
        "place_id": place.id,
        "name": place.name,
        "category": place.category,
        "issues": [],
        "suggestions": [],
        "missing_fields": [],
        "quality_score": 0
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if not place.name or not place.name.strip():
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ")
        analysis["missing_fields"].append("name")
    else:
        analysis["quality_score"] += 1
    
    if not place.category or not place.category.strip():
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        analysis["missing_fields"].append("category")
    else:
        analysis["quality_score"] += 1
    
    if not place.description_full and not place.summary:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ")
        analysis["missing_fields"].append("description")
    else:
        analysis["quality_score"] += 1
    
    if not place.tags_csv:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–≥–∏")
        analysis["missing_fields"].append("tags")
    else:
        analysis["quality_score"] += 1
    
    if not place.address:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å")
        analysis["missing_fields"].append("address")
    else:
        analysis["quality_score"] += 1
    
    if not place.lat or not place.lng:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        analysis["missing_fields"].append("coordinates")
    else:
        analysis["quality_score"] += 1
    
    if not place.price_level:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å")
        analysis["missing_fields"].append("price_level")
    else:
        analysis["quality_score"] += 1
    
    if not place.hours_json:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã")
        analysis["missing_fields"].append("hours")
    else:
        analysis["quality_score"] += 1
    
    if not place.picture_url:
        analysis["issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        analysis["missing_fields"].append("picture")
    else:
        analysis["quality_score"] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    total_fields = 9
    quality_percentage = (analysis["quality_score"] / total_fields) * 100
    
    if quality_percentage >= 80:
        analysis["overall_quality"] = "excellent"
    elif quality_percentage >= 60:
        analysis["overall_quality"] = "good"
    elif quality_percentage >= 40:
        analysis["overall_quality"] = "fair"
    else:
        analysis["overall_quality"] = "poor"
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    if "description" in analysis["missing_fields"]:
        analysis["suggestions"].append("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ GPT")
    
    if "tags" in analysis["missing_fields"]:
        analysis["suggestions"].append("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ GPT")
    
    if "coordinates" in analysis["missing_fields"]:
        analysis["suggestions"].append("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Google API")
    
    if "picture" in analysis["missing_fields"]:
        analysis["suggestions"].append("–ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫")
    
    return analysis


def test_10_places():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 10 –º–µ—Å—Ç"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—Ç –∏–∑ –ë–î")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º published
        places = db.query(Place).filter(
            Place.processing_status == 'published'
        ).order_by(Place.id.desc()).limit(10).all()
        
        if not places:
            logger.error("‚ùå –ù–µ—Ç –º–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(places)} –º–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        results = []
        for i, place in enumerate(places, 1):
            logger.info(f"\n--- –ú–µ—Å—Ç–æ {i}: {place.name} ---")
            
            analysis = analyze_place_data(place)
            results.append(analysis)
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
            logger.info(f"–ö–∞—á–µ—Å—Ç–≤–æ: {analysis['overall_quality']} ({analysis['quality_score']}/9)")
            logger.info(f"–ü—Ä–æ–±–ª–µ–º—ã: {len(analysis['issues'])}")
            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: {', '.join(analysis['missing_fields'])}")
            
            if analysis['issues']:
                logger.info(f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {analysis['issues'][:3]}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\n{'='*60}")
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info(f"{'='*60}")
        
        quality_counts = {}
        total_issues = 0
        total_missing = 0
        
        for result in results:
            quality = result['overall_quality']
            quality_counts[quality] = quality_counts.get(quality, 0) + 1
            total_issues += len(result['issues'])
            total_missing += len(result['missing_fields'])
        
        logger.info(f"–ö–∞—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:")
        for quality, count in quality_counts.items():
            logger.info(f"  {quality}: {count}")
        
        logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: {total_issues / len(results):.1f}")
        logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π: {total_missing / len(results):.1f}")
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º
        all_issues = []
        for result in results:
            all_issues.extend(result['issues'])
        
        issue_counts = {}
        for issue in all_issues:
            issue_counts[issue] = issue_counts.get(issue, 0) + 1
        
        logger.info(f"\n–¢–æ–ø –ø—Ä–æ–±–ª–µ–º:")
        for issue, count in sorted(issue_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            logger.info(f"  {issue}: {count} —Ä–∞–∑")
        
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AI Editor Agent")
    test_10_places()


if __name__ == "__main__":
    main()
